<<<<<<< Updated upstream
levels:
    1:
        1:
            question_text: "What's this programming language called?"
            mp_choice_options:
            -   option: "Hedy"
                feedback: "Good job!"
            -   option: "Heddy"
                feedback: "Not this one!"
            -   option: "Haydie"
                feedback: "Not this one!"
            -   option: "Heidi"
                feedback: "Not this one!"
            correct_answer: "A"
            hint: "It's named after Hedy Lamarr."
            question_score: '10'
        2:
            question_text: "Which command makes text appear?"
            mp_choice_options:
            -   option: |
=======
adventures:
    default:
        name: "Introduction"
        description: "Level explanation"
        default_save_name: "intro"
        levels:
            1:
                story_text: |
                    ## Welcome to Hedy!
                    In Level 1 you can use the commands `{print}`, `{ask}` and `{echo}`.
                    Type your code in the programming field. Or press the green button in the example code block, and the code will be typed for you!
                    Try the code yourself with the green 'Run code' button under the programming field.

                    You can print text to the screen using the `{print}` command.     

                example_code: |
>>>>>>> Stashed changes
                    ```
                    {echo}
                    ```
                feedback: "`{echo}` repeats a given answer."
            -   option: |
                    ```
                    {print}
                    ```
                feedback: "Correct!"
            -   option: |
                    ```
                    hello
                    ```
                feedback: "Hello isn't a command."
            -   option: |
                    ```
                    {ask}
                    ```
                feedback: "With `{ask}`, you can ask a question."
            correct_answer: "B"
            hint: "_?_ Hello world!"
            question_score: '10'
        3:
            question_text: "How do you ask what someone's favorite color is?"
            mp_choice_options:
            -   option: |
                    ```
                    {print} What is your favorite color?
                    ```
                feedback: "`{print}` prints text, but it doesn't ask questions."
            -   option: |
                    ```
                    {ask} {print} What is your favorite color?
                    ```
                feedback: "You only need one command, not two."
            -   option: |
                    ```
                    {ask} What is your favorite color?
                    ```
                feedback: "Great!"
            -   option: |
                    ```
                    {echo} What is your favorite color?
                    ```
                feedback: "`{echo}` repeats your answer back to you."
            correct_answer: "C"
            hint: "You can ask something with the `{ask}` command"
            question_score: '10'
        4:
            question_text: "What is wrong with this code?"
            code: |-
                Hi Im Hedy!
                {ask} Who are you?
                {echo} Hi...
            mp_choice_options:
            -   option: "`{print}` in line 1 is missing."
                feedback: "Correct!"
            -   option: "Im in line 1 is spelled wrong."
                feedback: "Im is spelled wrong on purpose; Hedy doesn't understand the apostrophes yet."
            -   option: "`{echo}` isn't a command."
                feedback: "`{echo}` is a command, there's another mistake."
            -   option: "Nothing! This is a perfect code!"
                feedback: "Wrong, look carefully!"
            correct_answer: "A"
            hint: "Line 1 doesn't seem right"
            question_score: '10'
        5:
            question_text: "Which command is missing in line 2?"
            code: |-
                {ask} What is your favorite pet?
                _?_ So your favorite pet is...
            mp_choice_options:
            -   option: |
                    ```
<<<<<<< Updated upstream
                    {print}
=======
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
                    ```
            10:
                start_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
                story_text: |-
                    ## For each item in my list...
                    In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
                    `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with spaces.
                example_code: |
                    ```
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
                    ```
            11:
                start_code: |-
                    {for} counter {in} {range} 1 {to} 5
                        {print} counter
                story_text: |-
                    ## Loops!
                    `{print}` works just the same but we add a new form of the `{for}`. You can now write `{for} counter {in} {range} 1 {to} 5` instead of `{repeat} 5 {times}` and use `counter` in your program.
                    Try it out to see what happens! Remember to use indentations after the `{for}` and `{if}` statements (That means starting a sentence with four spaces).
                example_code: |
                    ```
                    {for} counter {in} {range} 1 {to} 5
                        {print} counter
                    ```
            12:
                start_code: |-
                    {print} 'decimal numbers now need to use a dot'
                    {print} 2.5 + 2.5
                story_text: |-
                    ## Numbers and texts
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |
                    **All texts need to be in quotation marks**
                    For this level on you will also have to use quotation marks when storing a text with `=`:
                example_code_2: |
                    ```
                    name = 'Hedy the Robot'
                    {print} 'Hello ' name
                    ```
                story_text_3: |
                    **All items in lists need quotation marks too**
                    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
                    This allows you to save two words as 1 item on the list, for example 'Iron Man'.
                example_code_3: |
                    ```
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    {print} superheroes {at} {random}
                    ```
                story_text_4: |
                    **All text after `{if}` comparisons need quotation marks too**
                example_code_4: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
                    ```
                story_text_5: |
                    **Numbers don't need quotation marks**
                    For numbers, you do not use quotation marks in the `=`:
                example_code_5: |
                    ```
                    score = 25
                    {print} 'You got ' score
                    ```
                story_text_6: |-
                    **Maths with words** 
                    In this level it is also allowed to use the + sign with texts. For example:
                example_code_6: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```
            13:
                start_code: |-
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
                story_text: |-
                    ## And... Or..?
                    We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two {if}'s but can use `{and}` and `{or}`. If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
                example_code: |
                    ```
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
                    ```
            14:
                start_code: |-
                    age = {ask} 'How old are you?'
                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
                story_text: |
                    ## Great, Greater, Greatest!
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```
            15:
                start_code: |-
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                story_text: |-
                    ## More loops!
                    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
                    So don't forget to change the value in the loop.

                    In the example code, we continue until a correct answer has been given.
                    If the correct answer is never given, the loop never ends!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
            16:
                start_code: |-
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit
                story_text: |-
                    ## More and more like real code!
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    You can use the square brackets as well to point out a place in the lists.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'the lucky number of ' friends[i]
                        {print} 'is ' lucky_numbers[i]
>>>>>>> Stashed changes
                    ```
                feedback: "No, you would like the answer to be repeated back to you."
            -   option: |
                    ```
                    Hedy
                    ```
                feedback: "Hedy isn't a command."
            -   option: |
                    ```
                    {ask}
                    ```
                feedback: "With `{ask}` you can ask a question."
            -   option: |
                    ```
                    {echo}
                    ```
<<<<<<< Updated upstream
                feedback: "Right on!"
            correct_answer: "D"
            hint: "You want to see the answer at the end of line 2..."
            question_score: '10'
        6:
            question_text: "What's wrong with this code?"
            code: |-
                {print} Hi im Hedy!
                {print} Which football team do you support?
                {echo} You support...
                {print} Cool! Me too!
            mp_choice_options:
            -   option: "In line 1 `{print}` should be replaced with `{ask}`."
                feedback: "`{print}` in line 1 is correct."
            -   option: "In line 2, `{print}` should be replaced with `{ask}`."
                feedback: "Great! You paid attention!"
            -   option: "Line 3 has to begin with `{print}` instead of `{echo}`."
                feedback: "`{echo}` is correct."
            -   option: "In line 4, `{print}` is spelled wrong."
                feedback: "No, there is a mistake somewhere else"
            correct_answer: "B"
            hint: "Check the `{print}` commands."
            question_score: '10'
        7:
            question_text: "What's wrong with this code?"
            code: |-
                {print} Welcome at Hedys restaurant!
                {ask} What would you like to eat?
                {echo} So you want to order ...
                {print} Coming right up! Enjoy!
            mp_choice_options:
            -   option: "In line 1 `{print}` needs to be replaced with `{ask}`"
                feedback: "Are you sure something is wrong?"
            -   option: "In line 1 `{print}` needs to be replaced with `{echo}`"
                feedback: "Are you sure something's wrong?"
            -   option: "In line 3 `{echo}` needs to be replaced with `{print}`"
                feedback: "Are you sure something is wrong?"
            -   option: "Nothing! This is a perfect code!"
                feedback: "Correct!"
            correct_answer: "D"
            hint: "Check the code line by line"
            question_score: '10'
        8:
            question_text: "How do you use the `{echo}` command?"
            mp_choice_options:
            -   option: "You can use it to `{ask}` a question."
                feedback: "That's what `{ask}` is for!"
            -   option: "You can use it to print text."
                feedback: "That's what `{print}` is for!"
            -   option: "You can use it to repeat an answer."
                feedback: "Good job!"
            -   option: "You can use it to make text disappear."
                feedback: "That's not right..."
            correct_answer: "C"
            hint: "`{echo}` is used after an `{ask}` command."
            question_score: '10'
        9:
            question_text: "What's wrong with this code?"
            code: |-
                {print} Hello!
                {print} How are you doing?
                {echo} So you are doing...
            mp_choice_options:
            -   option: "`{print}` in line 1 should be `{ask}`"
                feedback: "No, `{print}` is right. Where is the question being asked?"
            -   option: "`{print}` in line 2 should be `{ask}`"
                feedback: "Super!"
            -   option: "`{echo}` in line 3 should be `{ask}`"
                feedback: "No, `{echo}` is right. Where is the question being asked?"
            -   option: "Nothing. This is a perfect code!"
                feedback: "Look carefully for the mistake..."
            correct_answer: "B"
            hint: "`{ask}` allows you to ask a question"
            question_score: '10'
        10:
            question_text: "Are you ready for level 2?"
            mp_choice_options:
            -   option: "Yes!"
                feedback: "Great! Let's go to the next level!"
            -   option: "No"
                feedback: "What a shame... You can practice some more in level 1!"
            correct_answer: "A"
            hint: "Let's go!"
            question_score: '10'
    2:
        1:
            question_text: "Which statement is true?"
            mp_choice_options:
            -   option: "You can use the {print} command to ask questions."
                feedback: "That is what ask is for"
            -   option: "You can use the {ask} command to echo answers."
                feedback: "That is not true"
            -   option: "With the {print} command you can make text appear"
                feedback: "Good"
            -   option: "With the {sleep} command, you can remove text from the screen."
                feedback: "That's not how sleep works."
            correct_answer: "C"
            hint: "`{print}` still works the same way as in level 1"
            question_score: '10'
        2:
            question_text: "Which code is correct?"
            mp_choice_options:
            -   option: |
                    ```
                    name {is} {ask} What is your name?
                    ```
                feedback: "Super!"
            -   option: |
                    ```
                    {ask} {is} name What is your name
                    ```
                feedback: "The words are right, the order is not!"
            -   option: |
                    ```
                    {ask} What is your name?
                    ```
                feedback: "This worked in level 1, but in level 2 and up it works differently."
            -   option: |
                    ```
                    {ask} What is your name? {is} name
                    ```
                feedback: "The words are right, the order isn't!"
            correct_answer: "A"
            hint: "`{ask}` doesn't work like in level 1"
            question_score: '10'
        3:
            question_text: "What appears on your output screen when you run this code?"
            code: |-
                name {is} Marleen
                {print} name goes to the market and she buys an apple.
            mp_choice_options:
            -   option: "name goes to the market and she buys an apple."
                feedback: "The word name is replaced with Marleen"
            -   option: "Marleen goes to the market."
                feedback: "The second part of the sentence isn't left out!"
            -   option: "Marleen goes to the market and she buys an apple."
                feedback: "Right on!"
            -   option: "Marleen goes to the market and Marleen buys an apple."
                feedback: "She is not replaced with the name"
            correct_answer: "C"
            hint: "The word name is replaced with Marleen"
            question_score: '10'
        4:
            question_text: "What will you see on the output screen when you run this code?"
            code: |-
                name {is} Hedy
                {print} Hi my name is name!
            mp_choice_options:
            -   option: "Hi my name is name"
                feedback: "The variable name is replaced with Hedy"
            -   option: "Hi my name is Hedy"
                feedback: "The variable name is replaced with Hedy"
            -   option: "Hi my Hedy is name"
                feedback: "The variable name is replaced with Hedy"
            -   option: "Hi my Hedy is Hedy"
                feedback: "Correct, this mistake will be fixed in level 3!"
            correct_answer: "D"
            hint: "'name' is being replaced with 'Hedy' in both places"
            question_score: '10'
        5:
            question_text: "What happens when you use the `{sleep}` command?"
            mp_choice_options:
            -   option: "It slows down your computer"
                feedback: "fortunately not!"
            -   option: "It closes down Hedy"
                feedback: "fortunately not!"
            -   option: "Your program pauses for a second and then continues"
                feedback: "That's right!"
            -   option: "You put it at the end so Hedy knows your program is finished"
                feedback: "No it would be useless at the end of your code"
            correct_answer: "C"
            hint: "The computer waits for a second at the `{sleep}` command"
            question_score: '10'
        6:
            question_text: "What should be on the lines?"
            code: |-
                {print} And the award for best programming language goes to...
                _?_
                {print} Hedy!
            mp_choice_options:
            -   option: |
=======

    story:
        name: "Story"
        description: "Story"
        default_save_name: "Story"
        levels:
            1:
                story_text: |
                    ## Make a story
                    In level 1 you can make a story with a different main character that you enter yourself.

                    In the first line, use `{ask}` and ask who the main character of the story will be.

                    After that first line, start with `{print}` if the sentence needs to be printed.
                    You use `{echo}` if you want your main character to be at the end of the sentence.
                example_code: |
                    ```
                    {ask} The main character of this story is
                    {print} The main character is now going to walk in the forest
                    {echo} He's a bit scared,
                    {print} He hears crazy noises everywhere
                    {print} He's afraid this is a haunted forest
                    ```
                story_text_2: |
                    ## Challenge
                    Can you make your own story in Hedy now by using `{print}` , `{ask}` and `{echo}`?
                start_code: "{print} Your story starts here"
            2:
                story_text: |
                    ## Story
                    In level 2 you can make your story more fun. Your main character's name can now be anywhere in the sentence.

                    You do have to program a little bit extra for that. You must now name your main character first.

                    You can then put that name anywhere in a sentence.

                    ## Challenge
                    Can you make a story using a variable yourself? Can you add even more variables?
                example_code: |-
>>>>>>> Stashed changes
                    ```
                    {sleep}
                    ```
<<<<<<< Updated upstream
                feedback: "Perfect!"
            -   option: |
=======
                start_code: "{print} Your story"
            3:
                story_text: |
                    ## Story
                    In level 3 you can make your story more fun. You can use randomness for any monster, animal or other obstacle, like this:

                example_code: |
                    ```
                    animals {is} 🦔, 🐿, 🦉, 🦇
                    {print} He now hears the sound of an animals {at} {random}
                    ```
                story_text_2: |
                    The command `{add}` can also come in handy in your story.
                example_code_2: |
                    ```
                    {print} He hears a sound
                    animals {is} 🐿, 🦔, 🦇, 🦉
                    animal {is} {ask} What do you think it is?
                    {add} animal {to_list} animals
                    {print} it was an animal {at} {random}
                    ```
                story_text_3: |
                    This is an example of the `{remove}` command in your story

                    ## Challenge
                    Can you use the 3 new commands `{at} {random}` , `{add} {to}` and `{remove} {from}` in your own story?
                example_code_3: |
                    ```
                    {print} His backpack got way too heavy.
                    {print} Inside were a bottle of water, a flashlight and a brick.
                    bag {is} water, flashlight, brick
                    dump {is} {ask} Which item should he dump?
                    {remove} dump {from} bag
                    ```
                start_code: "{print} Your story"
            4:
                story_text: |
                    ## Story
                    You may have noticed that there is still a problem in the previous levels. Did you try to print a sentence that contained the word name? i.e. `{print}` my name is name.
                    You can solve that in this level. You must use quotation marks for everything that you are going to print.
                example_code: |
                    ```
                    name {is} Hans
                    {print}  _ The name of the main character is _ name
                    {print} name  _ is now going to walk in the woods _
                    {print} name _ is a bit scared _
                    animals {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ He hears the sound of a _ animals {at} {random}
                    {print} name _ is afraid this is a haunted forest _
                    ```
                start_code: "{print} 'Your story will be printed here!'"
            5:
                story_text: |
                    ## Story
                    In this level you can program different endings, which will make your story even more fun.

                    ## Challenge
                    Think of two endings for your story, for example:

                    - The princess is walking through the forest
                    - She runs into a monster

                    - Happy ending: She takes her sword and the monster quickly runs away
                    - Bad Ending: The monster eats the princess

                    You can also ensure that a name can be entered again. That works just like in the previous levels. You can combine that with an `{if}`, and then you have already made a whole program!
                example_code: |
                    ```
                    name {is} {ask} 'Who is walking in the forest?'
                    {print} name 'walks through the forest'
                    {print} name 'encounter a monster'
                    end {is} {ask} 'Would you like a good or a bad ending?'
                    {if} end {is} good {print} name 'takes the sword and the monster quickly runs away'
                    {else} {print} 'The monster eats' name
                    ```
                start_code: "{print} 'Here your story will start!'"
            7:
                story_text: |
                    ## Story
                    In a story, someone says words several times. For example, when someone calls for help or sings a song.
                    You can put such repetitions in your story, in this level with `{repeat}`.

                    ## Challenge
                    Can you make your own story with repitition?
                example_code: |
>>>>>>> Stashed changes
                    ```
                    {echo}
                    ```
<<<<<<< Updated upstream
                feedback: "There is nothing to repeat back here"
            -   option: |
=======

                start_code: "{repeat} 5 {times} {print} 'Help!'"
            8:
                story_text: |
                    ## Story
                    In this level you can use multiple lines in your {if} commands, this way you can upgrade your happy or sad ending!

                    ## Challenge
                    Can you make your own story with two different endings?
                example_code: |
                    ```
                    {print} 'OH NO! The T-rex is closing in!'
                    end = {ask} 'Do you want a happy or a sad ending?'
                    {if} end {is} happy
                        {print} 'Just in time Richard jumps back into the time machine!'
                        {print} 'Michael types in the code and...'
                        {print} '💥ZAP!💥'
                        {print} 'They are back in their garage'
                    {else}
                        {print} 'Michael yells COME ON RICHARD! RUN FASTER!'
                        {print} 'But Richard is too slow...'
                        {print} 'The T-rex closes in and eats him in one big bite!🦖'
                    ```
                start_code: "# place your code here"
            9:
                story_text: |
                    ## Story
                    In this level you can use nesting to put `{if}`, `{repeat}` or `{for}` commands inside other `{if}`, `{repeat}` or `{for}` commands. This gives you many options and really helps you to make your story interactive.
                example_code: |
                    ```
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                        {if} book {is} yes
                            {print} 'Robin buys the book and goes home'
                        {else}
                            {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
>>>>>>> Stashed changes
                    ```
                    {print}
                    ```
<<<<<<< Updated upstream
                feedback: "There is no text there to `{print}` there"
            -   option: |
                    ```
                    {ask}
                    ```
                feedback: "There is no question there to be asked"
            correct_answer: "A"
            hint: "Pause for dramatic effect..."
            question_score: '10'
        7:
            question_text: "What command should be used on line 2?"
            code: |-
                {print} I will explode in 3 seconds!
                _?_
                {print} BOOM!
            mp_choice_options:
            -   option: |
                    ```
                    {print} 3
                    ```
                feedback: "You don't need to `{print}`"
            -   option: |
                    ```
                    {sleep} 3
                    ```
                feedback: "Perfect!"
            -   option: |
=======
                    sword = lost
                    game = on
                    {print} 'Our hero is walking through the forest'
                    {print} 'The path splits two ways'
                    {repeat} 2 {times}
                        {if} game {is} on
                            path = {ask} 'Which path should she choose?'
                            {if} path {is} left
                                {if} sword {is} found
                                    {print} 'Our hero comes across a dragon!'
                                    {print} 'Luckily our hero has a sword to defeat the beast!'
                                    game = over
                                {else}
                                    {print} 'Our hero finds a dragon, but she doesnt have any weapons!'
                                    {print} 'Our hero is beaten by the dragon...'
                                    {print} 'Try again'
                                    game = over
                            {if} path {is} right
                                {if} sword {is} lost
                                    {print} 'Our hero finds a sword'
                                    {print} 'This could come in very handy'
                                    sword = found
                                {else}
                                    {print} 'You have already found the sword. There is nothing left here.'
                                    {print} 'She walks back'
                    ```
                start_code: "# place your code here"
            10:
                story_text: |
                    ## Story
                    In this level you can use the {for} command in your story. In this way you could easily program the children's book 'brown bear, brown bear, what do you see'.

                example_code: |
                    ```
                    animals = red bird, black sheep, green frog, yellow duck, little child
                    {print} 'brown bear'
                    {print} 'brown bear'
                    {print} 'What do you see?'
                    {for} animal {in} animals
                        {print} 'I see a ' animal ' looking at me'
                        {print} animal
                        {print} animal
                        {print} 'What do you see?'
                    {print} 'I see all the animals looking at me!'
                    ```
                start_code: "# place your code here"
            12:
                story_text: |-
                    ## Story
                    In this level you can use the quotation marks to save multiple words in a variable.
                example_code: |
                    ```
                    name = 'The Queen of England'
                    {print} name ' was eating a piece of cake, when suddenly...'
                    ```
                start_code: "# place your code here"
            13:
                story_text: |
                    ## Story
                    By using the `{and}` and `{or}` commands, you can shorten your stories. For example, check out the dragon story.

                    ## Challenge
                    Can you make your own adventure minigame like this?
                example_code: |
                    ```
                    sword = 'lost'
                    game = 'on'
                    {print} 'Our hero is walking through the forest'
                    {print} 'The path splits two ways'
                    {for} i {in} {range} 0 {to} 2
                        {if} game {is} 'on'
                            path = {ask} 'Which path should she choose?'
                            {if} path {is} 'left' {and} sword {is} 'found'
                                {print} 'Our hero comes across a dragon!'
                                {print} 'Luckily our hero has a sword to defeat the beast!'
                                game = 'over'
                            {if} path {is} 'left' {and} sword {is} 'lost'
                                {print} 'Our hero finds a dragon, but she doesnt have any weapons!'
                                {print} 'Our hero is beaten by the dragon...'
                                {print} 'Try again'
                                game = 'over'
                            {if} path {is} 'right' {and} sword {is} 'found'
                                {print} 'You have already found the sword. There is nothing left here.'
                                {print} 'She walks back'
                            {if} path {is} 'right' {and} sword {is} 'lost'
                                {print} 'Our hero finds a sword'
                                {print} 'This could come in very handy'
                                sword = 'found'
                    ```
                start_code: "# place your code here"
            15:
                story_text: |
                    ## Story
                    Using the `{while}` loop can make your stories more interesting. For example, you can use `{while} game {is} 'on'` so you can play until the game is over.
                    Or you can use `{while} sword {is} 'lost'` so the player can't continu the game until they have found something.
                example_code: |
                    ```
                    keys = 'lost'
                    {print} 'You are standing in your garden and you have lost your keys.'
                    {print} 'Where do you want to look for them?'
                    {print} 'You can choose: tree, flowerbed, rock, postbox'
                    {while} keys == 'lost'
                        location = {ask} 'Where do you want to look?'
                        {if} location == 'flowerbed'
                            {print} 'Here they are!'
                            keys = 'found'
                        {else}
                            {print} 'Nope they are not at the ' location
                    {print} 'Now you can enter the house!'
                    ```
                start_code: "# place your code here"
    years:
        name: "New Year's"
        description: "Countdown to the new year!"
        default_save_name: "New Year's Countdown"
        levels:
            
            11:
                story_text: |
                    ## Songs
                    In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.

                    ## Challenge
                    Fill in the blanks and make the code work!
                example_code: |
                    ## Countdown
                    ```
                    for _ in _ 10 to 1
                        {print} i
                    {print} 'Happy New Year!'
                    ```
                start_code: "# place your code here"
    parrot:
        name: "Parrot"
        description: "Create your own online pet parrot that will copy you!"
        default_save_name: "Parrot"
        levels:
            1:
                story_text: |
                    ## Parrot
                    Create your own online pet parrot that will copy you!
                example_code: |
                    ```
                    {print} Im Hedy the parrot
                    {ask} whats your name?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ## Challenge
                    Can you make the parrot ask a different question? Fill in the blanks in the example!
                example_code_2: |
                    ```
                    {print} Im Hedy the parrot
                    {ask} _
                    {echo}
                    {echo}
                start_code: "{print} Im Hedy the parrot"
            2:
                story_text: |
                    ## Parrot
                    Create your own online pet parrot that will copy you!
                example_code: |
>>>>>>> Stashed changes
                    ```
                    {sleep}
                    ```
                feedback: "This way the bomb will explode in 1 second"
            -   option: |
                    ```
                    {sleep} {sleep} {sleep}
                    ```
                feedback: "Make it easier on yourself by using the number 3"
            correct_answer: "B"
            hint: "You want the computer to wait for 3 seconds"
            question_score: '10'
        8:
            question_text: "How would you correct the first line of code?"
            code: |-
                {ask} {is} How old are you?
                {print} age
            mp_choice_options:
            -   option: |
                    ```
                    age {ask} {is} How old are you?
                    ```
                feedback: "That is the wrong order"
            -   option: |
                    ```
                    {ask} {is} age How old are you?
                    ```
                feedback: "That is the wrong order"
            -   option: |
                    ```
                    age {is} {ask} How old are you?
                    ```
                feedback: "You get it!"
            -   option: |
                    ```
                    age {is} How old are you?
                    ```
                feedback: "Where is the `{ask}` command?"
            correct_answer: "C"
            hint: "The variable name should come first"
            question_score: '10'
        9:
            question_text: "What is going wrong in this code?"
            code: |-
                dogs {is} animal
                {print} I love animal
            mp_choice_options:
            -   option: "Line 1 should say: dogs `{is}` animals"
                feedback: "The variable name is animal"
            -   option: "Line 1 should say: animal `{is}` dogs"
                feedback: "Great!"
            -   option: "Line 2 should say: `{print}` I love animals"
                feedback: "The variable name is animal"
            -   option: "Line 2 should say: `{sleep}` I love animals"
                feedback: "Sleep is not used to `{print}` text"
            correct_answer: "B"
            hint: "You want to `{print}` 'I love dogs'"
            question_score: '10'
        10:
            question_text: "What command should be used on the line 1?"
            code: |-
                flavor {is} _?_
                {print} Your favorite icecream is...
                {sleep}
                {print} flavor
            mp_choice_options:
            -   option: |
                    ```
                    {sleep} 3
                    ```
                feedback: "You want to know the favorite flavor!"
            -   option: |
                    ```
                    {print} strawberries
                    ```
                feedback: "You do not want a `{print}` command at the middle of the line..."
            -   option: |
                    ```
                    strawberries, chocolate, vanilla
                    ```
                feedback: "This way you are making a list. You don't want that now."
            -   option: |
                    ```
                    {ask} What flavor icecream do you like?
                    ```
                feedback: "That's right!"
            correct_answer: "D"
            hint: "You want to `{ask}` a question"
            question_score: '10'
    3:
        1:
            question_text: "What command do you use to let Hedy pick something arbitrarily?"
            mp_choice_options:
            -   option: |
                    ```
                    {print}
                    ```
                feedback: "`{print}` is used to print text"
            -   option: |
                    ```
                    {ask}
                    ```
                feedback: "`{ask}` is used to ask a question"
            -   option: |
                    ```
                    {is}
                    ```
                feedback: "`{is}` is used to make a list"
            -   option: |
                    ```
                    {at} {random}
                    ```
                feedback: "Correct!"
            correct_answer: "D"
            hint: "Arbitrarily means without a plan or randomly."
            question_score: '10'
        2:
            question_text: "What's wrong with this code?"
            code: |-
                animals {is} dog cat cow
                {print} animals {at} {random}
            mp_choice_options:
            -   option: "You need commas in line 1: dog, cat, cow."
                feedback: "Good job!"
            -   option: "Line 1 needs to start with `{print}`."
                feedback: "No, you don't need `{print}`"
            -   option: "Line 2 needs to say 'animal' instead of 'animals'',"
                feedback: "animals is correct."
            -   option: "`{at} {random}` is spelled incorrectly"
                feedback: "`{at} {random}` is the correct spelling"
            correct_answer: "A"
            hint: "There's something wrong in line 1"
            question_score: '10'
        3:
            question_text: "How do you fix the mistake in line 2?"
            code: |-
                options {is} rock, paper, scissors
                {print} rock, paper, scissors {at} {random}
            mp_choice_options:
            -   option: |
                    ```
                    {at} {random} {print} options
                    ```
                feedback: "You're almost there. The order of the words isn't right yet."
            -   option: |
                    ```
                    {print} rock {at} {random}
                    ```
                feedback: "you don't always want the Hedy to {print} rock, sometimes you want scissors or paper."
            -   option: |
                    ```
                    {print} options {at} {random}
                    ```
                feedback: "Very good!"
            -   option: "Nothing, the code is correct!"
                feedback: "Look carefully for the mistake"
            correct_answer: "C"
            hint: "The variable (the list) is called options."
            question_score: '10'
        4:
            question_text: "What should change in line 2 to print a random price?"
            code: |-
                prices {is} 1 dollar, 100 dollar, 1 million dollar
                {print} price {at} {random}
            mp_choice_options:
            -   option: |
                    ```
                    {print} price
                    ```
                feedback: "You don't want to `{print}` the word price, but you want to `{print}` one price out of your list `{at} {random}`"
            -   option: |
                    ```
                    {print} prices {at} {random}
                    ```
                feedback: "Great! You've really paid attention."
            -   option: |
                    ```
                    {print} {at} {random} price
                    ```
                feedback: "`{at} {random}` is placed behind the variable."
            -   option: "Nothing, this code is alright."
                feedback: "Look carefully for the mistake you missed!"
            correct_answer: "B"
            hint: "The variable name is prices"
            question_score: '10'
        5:
            question_text: "What is wrong in this code?"
            code: |-
                question {is} {ask} What do you want to know?
                {print} question
                answers {is} yes, no, maybe
                {print} answers {at} {random}
            mp_choice_options:
            -   option: "Line 1 needs to say `{print}` instead of `{ask}`"
                feedback: "No, that's not wrong."
            -   option: "Line 2 needs to say `{ask}` instead of `{print}`"
                feedback: "No that's not wrong."
            -   option: "Line 2 needs to say answers `{at} {random}` `{is}` yes, no, maybe"
                feedback: "No, that's not wrong."
            -   option: "Nothing, this code is perfect"
                feedback: "That's right!"
            correct_answer: "D"
            hint: "Does this code even have a mistake?"
            question_score: '10'
        6:
            question_text: "What's wrong with this code?"
            code: |-
                question {is} {ask} What do you want to know?
                answers yes, no, maybe
                {print} answers {at} {random}
            mp_choice_options:
            -   option: "Line 2 needs to say question instead of answers"
                feedback: "No that's not right"
            -   option: "Line 2 needs the `{is}` command"
                feedback: "Correct"
            -   option: "Line 3 needs to say answer instead of answers"
                feedback: "No the variable's called answers"
            -   option: "Nothing! This code is great!"
                feedback: "Actually, line 2 has a mistake."
            correct_answer: "B"
            hint: "There is something wrong with line 2."
            question_score: '10'
        7:
            question_text: "What does the `{add}` command do?"
            code: |-
                books {is} Harry Potter, The Hobbit, Green Eggs and Ham
                your_book {is} {ask} What is your favorite book?
                {add} your_book {to} books
                {print} books {at} {random}
            mp_choice_options:
            -   option: "The `{add}` command removes a random book from the list"
                feedback: "The remove command removes, the add command adds"
            -   option: "The `{add}` command adds a random book to a list"
                feedback: "It doesn't. It adds your answer to the list!"
            -   option: "The `{add}` command adds your favorite book to the list"
                feedback: "Correct!"
            -   option: "The `{add}` command prints your favorite book."
                feedback: "No, it adds your favorite book to the list"
            correct_answer: "C"
            hint: "The `{add}` command adds a book, but which one?"
            question_score: '10'
        8:
            question_text: "What is the output of this code?"
            code: |-
                crisps {is} sea salt, paprika, sour cream
                {remove} sea salt {from} crisps
                {remove} paprika {from} crisps
                {print} crisps {at} {random}
            mp_choice_options:
            -   option: "You can't tell, because Hedy will `{print}` one of the 3 flavors `{at} {random}`"
                feedback: "Take a look at the `{remove}` commands"
            -   option: "sea salt"
                feedback: "sea salt is removed from the list"
            -   option: "paprika"
                feedback: "Paprika is removed from the list"
            -   option: "sour cream"
                feedback: "That's right!"
            correct_answer: "D"
            hint: "There are 3 flavors, bit 2 are removed. Which one remains?"
            question_score: '10'
        9:
            question_text: "What's wrong with this code?"
            code: |-
                colors {is} blue, purple, green
                chosen_color {is} {ask} Which hair color wouldn't you like to have?
                {remove} chosen_color {from} colors
                {print} I will dye my hair color {at} {random}
            mp_choice_options:
            -   option: "Line 3 should say: `{remove}` blue `{from}` colors"
                feedback: "Maybe you want blue hair though!"
            -   option: "Line 3 should have an `{add}` command instead of a `{remove}` command"
                feedback: "You want to remove the chosen color so `{remove}` is right."
            -   option: "In line 4 the variable should be called colors instead of color"
                feedback: "Great job!"
            -   option: "Nothing, this is a correct code!"
                feedback: "Find the mistake!"
            correct_answer: "C"
            hint: "Look at line 3"
            question_score: '10'
        10:
            question_text: "What should be on the _?_?"
            code: |-
                walkers {is} dad, mom, Sam, Petra
                walked_yesterday {is} {ask} Who walked the dogs yesterday?
                {print} walked_yesterday shouldn't have to walk the dogs again today
                _?_
                {print} walkers {at} {random} , it's your turn to walk the dogs!
            mp_choice_options:
            -   option: |
                    ```
                    {remove} walked_yesterday {from} walkers
                    ```
                feedback: "Super!"
            -   option: |
                    ```
                    {remove} walked yesterday {to} walkers
                    ```
                feedback: "`{remove} {from}` or `{add} {to}`, not `{remove} {to}`"
            -   option: |
                    ```
                    {remove} walkers {from} yesterday
                    ```
                feedback: "yesterday is not a variable"
            -   option: |
                    ```
                    {add} walked_yesterday {to} walkers
                    ```
                feedback: "This increased the change that the person who walked yesterday now has to do it again. That's mean."
            correct_answer: "A"
            hint: "The person who walked the dog yesterday should be removed from the list."
            question_score: '10'
    4:
        1:
            question_text: "Which of these is true?"
            mp_choice_options:
            -   option: "`{print}` and `{ask}` now need quotation marks"
                feedback: "That's right"
            -   option: "Only `{print}` needs quotation marks"
                feedback: "`{ask}` needs quotation marks too!"
            -   option: "`{at} {random}` doesn't work anymore in level 4"
                feedback: "`{at} {random}` still works"
            -   option: "`{at} {random}` now needs quotation marks"
                feedback: "No, but 2 other commands do."
            correct_answer: "A"
            hint: "In level 4 you need quotation marks for 2 commands."
            question_score: '10'
        2:
            question_text: "Which code uses the proper quotation marks?"
            mp_choice_options:
            -   option: |
                    ```
                    {print} `hello`
                    ```
                feedback: "This quotation mark is skewed, you need a straight one."
            -   option: |
                    ```
                    {print} 'hello'
                    ```
                feedback: "Correct"
            -   option: |
                    ```
                    {print} hello
                    ```
                feedback: "There are no quotation marks here!."
            -   option: |
                    ```
                    {print} ,hello,
                    ```
                feedback: "This is a comma, you need quotation marks."
            correct_answer: "B"
            hint: "Pick the right quotation marks."
            question_score: '10'
        3:
            question_text: "Where are the quotation marks used correctly?"
            mp_choice_options:
            -   option: |
                    ```
                    {print} Hi Im Hedy
                    ```
                feedback: "Add quotation marks please!"
            -   option: |
                    ```
                    {print} 'Hi Im Hedy
                    ```
                feedback: "Both before and after the words you want to print should be a quotation mark."
            -   option: |
                    ```
                    '{print} Hi Im Hedy'
                    ```
                feedback: "The first quotation mark should be behind the word {print}"
            -   option: |
                    ```
                    {print} 'Hi Im Hedy'
                    ```
                feedback: "Perfect!"
            correct_answer: "D"
            hint: "Both before and after the words you want to print should be a quotation mark."
            question_score: '10'
        4:
            question_text: "Which statement is true?"
            mp_choice_options:
            -   option: "You need quotation marks around the word `{print}`, like this: `'{print}'`."
                feedback: "The quotation marks shouldn't be around the command itself."
            -   option: "You need quotation marks around the words you want to print."
                feedback: "Super!"
            -   option: "You do not need quotation marks when using the `{ask}` command"
                feedback: "Both `{print}` and `{ask}` require quotation marks"
            -   option: "You can choose yourself whether to use quotation marks or not."
                feedback: "Unfortunately, Hedy is stricter than that."
            correct_answer: "B"
            hint: "From level 4 on you need to use quotation marks."
            question_score: '10'
        5:
            question_text: "What has to be changed in order for the game to work?"
            code: |-
                options {is} rock, paper, scissors
                {print} 'options {at} {random}'
            mp_choice_options:
            -   option: |
                    ```
                    '{print} options {at} {random}'
                    ```
                feedback: "Never put the quotation mark in front of the {print} command."
            -   option: |
                    ```
                    {print} 'options' {at} {random}
                    ```
                feedback: "options is a variable. You don't literally want to print 'options {at} {random}'."
            -   option: |
                    ```
                    {print} options {at} {random}
                    ```
                feedback: "That's right"
            -   option: "Nothing, the game already works!"
                feedback: "Look carefully. There is an error."
            correct_answer: "C"
            hint: "You don't want Hedy to literally print 'options {at} {random}', you want it to print 'rock' or 'paper' or 'scissors'."
            question_score: '10'
        6:
            question_text: "What would be a good next line in this code?"
            code: |-
                prices {is} 1 dollar, 100 dollars, 1 million dollars
            mp_choice_options:
            -   option: |
                    ```
                    {print} 'You win...' prices {at} {random}
                    ```
                feedback: "Great! You get it!"
            -   option: |
                    ```
                    {print} You win... 'prices {at} {random}'
                    ```
                feedback: "Hedy will literally print 'prices {at} {random}'"
            -   option: |
                    ```
                    {print} You win... prices {at} {random}
                    ```
                feedback: "You need some quotation marks!"
            -   option: |
                    ```
                    {print} 'You win... prices {at} {random}'
                    ```
                feedback: "Hedy will literally print 'prices {at} {random}''"
            correct_answer: "A"
            hint: "Think carefully: what is a variable and should be outside of the quotation marks? And what are normal words that should be inside?."
            question_score: '10'
        7:
            question_text: "What's wrong with this code?"
            code: |-
                question {is} {ask} What do you want to know?
                answers {is} yes, no, maybe
                {print} answers {at} {random}
            mp_choice_options:
            -   option: "Quotation marks are missing in line 1"
                feedback: "Correct!"
            -   option: "Quotation marks are missing in line 2"
                feedback: "A variable doesn't need quotes"
            -   option: "Quotation marks are missing in line 3"
                feedback: "You don't want Hedy to literally print 'answers {at} {random}' so no quotation marks needed here!"
            -   option: "Nothing, this code is good as is!"
                feedback: "Look carefully. You missed a mistake!"
            correct_answer: "A"
            hint: "Check each line on whether they'd need quotation marks or not."
            question_score: '10'
        8:
            question_text: "What would be a good next line for this code?"
            code: |-
                {print} 'Welcome at the money show!'
                {print} 'In front of you are 3 doors'
                door {is} {ask} 'Which door do you choose?'
            mp_choice_options:
            -   option: |
                    ```
                    {print} So you pick door door
                    ```
                feedback: "We need quotation marks"
            -   option: |
                    ```
                    {print} 'So you pick ' door door
                    ```
                feedback: "If the player chooses door 3, Hedy will say 'So you pick 3 3"
            -   option: |
                    ```
                    {print} 'So you pick door ' door
                    ```
                feedback: "Super!"
            -   option: |
                    ```
                    {print} 'So you pick door door'
                    ```
                feedback: "Hedy will literally print 'So you pick door door"
            correct_answer: "C"
            hint: "The second word door should be replaced with the number, the first should still be the word door..."
            question_score: '10'
        9:
            question_text: "What will never appear in your output screen?"
            code: |-
                clubs {is} Real Madrid, Bayern Munchen, Manchester United, Ajax
                {print} clubs {at} {random} ' is going the win the champions league'
            mp_choice_options:
            -   option: "Ajax is going to win the champions league"
                feedback: "Hedy could `{print}` that"
            -   option: "Real Madrid is going to win the champions league"
                feedback: "Hedy could `{print}` that"
            -   option: "Bayer Munchen is going to win the champions league"
                feedback: "Hedy could `{print}` that"
            -   option: "FC Barcelona is going to win the champions league"
                feedback: "That's right. It's not in the list"
            correct_answer: "D"
            hint: "What are Hedy's options to randomly pick from?"
            question_score: '10'
        10:
            question_text: "Which statement is true?"
            code: |-
                people {is} mom, dad, Emma, Sophie
                {print} The dishes are done by...
                {print} people {at} {random}
            mp_choice_options:
            -   option: "Quotation marks are missing in line 1"
                feedback: "A list doesn't need quotation marks"
            -   option: "Quotation marks are missing in line 2"
                feedback: "Correct"
            -   option: "Quotation marks are missing in both line 2 and 3"
                feedback: "Line 3 doesn't need quotation marks because it's not printed literally"
            -   option: "Nothing, this code has no mistakes"
                feedback: "You missed one!"
            correct_answer: "B"
            hint: "One line needs quotation marks, because you want it to be printed literally."
            question_score: '10'
    5:
        1:
            question_text: "Which command should be filled in on the _?_?"
            code: |-
                number {is} {ask} 'What is your lucky number?'
                {if} number {is} 5 {print} 'Mine too!'
                _?_ {print} 'My lucky number is 5!'
            mp_choice_options:
            -   option: |
                    ```
                    {print}
                    ```
                feedback: "There already is a `{print}` command."
            -   option: |
                    ```
                    {if}
                    ```
                feedback: "The `{if}` command is used in the line above."
            -   option: |
                    ```
                    {sleep}
<<<<<<< Updated upstream
                    ```
                feedback: "That's not it!"
            -   option: |
=======
                    {print} name
                    ```
                story_text_2: |
                    ## Challenge
                    You can use variables to make the parrot say more than only your name. Can you complete this code?
                example_code_2: |
                    ```
                    {print} Im Hedy the parrot
                    name {is} {ask} whats your name?
                    {print} name
                    {sleep}
                    {print} name
                    surname {is} {ask} whats your surname?
                    _
                    {sleep}
                    _
                    ```
                start_code: "{print} Im Hedy the parrot!"
            3:
                story_text: |
                    ## Parrot
                    Teach your parrot a new word with `{add}`.
                    ## Challenge
                    How can you make your parrot say multiple words?
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} Train your parrot!
                    new_word {is} {ask} Which word do you want to teach them?
                    {add} new_word {to_list} words
                    {print} 🧒 Say new_word, Hedy!
                    {print} 🦜 words {at} {random}
                    ```
                start_code: "# place your code here"
            5:
                story_text: |
                    ## Parrot
                    Reward your parrot if it says the correct word!
                    Finish the code by filling in the 4 missing commands.
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} 'Train your parrot!'
                    new_word {is} {ask} 'Which word do you want to teach them?'
                    {add} new_word {to_list} words
                    said_word {is} words {at} {random}
                    {print} '🧒 Say ' new_word ', Hedy!'
                    {print} '🦜 ' said_word
                    _ said_word {is} new_word _ '🧒 Great job, Hedy! 🍪'
                    _ _ '🧒 No, Hedy! Say ' new_word
                    ```
                start_code: "# place your code here"
    songs:
        name: "Sing a song!"
        description: "Print a song"
        default_save_name: "Song"
        levels:
            6:
                story_text: |
                    ## Songs
                    Songs often contain a lot of repetition. Sometimes the repetition is also based on counting.
                    For example, in the well-known song 'Bottles of beer'. You can program that song with a little math.

                    Tip: Use the read aloud function to let Hedy sing the song to you!

                    ## Challenge
                    You can now repeat lines 2 to 7 as many times as you want by copying the lines.
                example_code: |
                    ```
                    verse = 99
                    {print} verse ' bottles of beer on the wall'
                    {print} verse ' bottles of beer'
                    {print} 'Take one down, pass it around'
                    verse = verse - 1
                    {print} verse ' bottles of beer on the wall'
                    {sleep}
                    ```
                story_text_2: |
                    ## 5 Little Monkeys jumping on the bed
                    This children's song counts down from 5 little monkeys to 1 monkey.
                    If you copy line 2 - 7 and paste it under the the code, you can sing the whole song!
                example_code_2: |
                    ```
                    number = 6
                    number = number - 1
                    print number ' little monkeys jumping on the bed'
                    print 'One fell off and bumped his head'
                    print 'Mama called the doctor and the doctor said'
                    print 'NO MORE MONKEYS JUMPING ON THE BED!'
                    sleep
                    ```
                start_code: "{print} 'Lets sing!'"
            7:
                story_text: |
                    ## Songs
                    Songs often contain a lot of repetition. For example... Baby Shark! If you sing it, you keep singing the same thing:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    You can make this song much shorter with a `{repeat}`! Can you finish the code?
                example_code: |
>>>>>>> Stashed changes
                    ```
                    {else}
                    ```
<<<<<<< Updated upstream
                feedback: "That's right!"
            correct_answer: "D"
            hint: "Which one goes together with the `{if}` command?"
            question_score: '10'
        2:
            question_text: "What appears in your output screen when you type in the name Hedy?"
            code: |-
                name {is} {ask} 'What is your name?'
                {if} name {is} Hedy {print} 'fun' {else} {print} 'less fun'
            mp_choice_options:
            -   option: "fun"
                feedback: "That's right!"
            -   option: "less fun"
                feedback: "If the name is Hedy, it will say 'fun''"
            -   option: "Hedy"
                feedback: "No, it doesn't print the name"
            -   option: "Error"
                feedback: "Fortunately not!"
            correct_answer: "A"
            hint: "`{if}` name `{is}` Hedy `{print}` ...?"
            question_score: '10'
        3:
            question_text: "What is the right password?"
            code: |-
                password {is} {ask} 'What is the password?'
                {if} password {is} SECRET {print} 'Correct!'
                {else} {print} 'ALARM! INTRUDER!'
            mp_choice_options:
            -   option: "Correct!"
                feedback: "This is printed when you type in the correct password"
            -   option: "SECRET"
                feedback: "That's right!'"
            -   option: "password"
                feedback: "The password isn't password..."
            -   option: "ALARM INTRUDER"
                feedback: "This is printed when you type in the incorrect password!"
            correct_answer: "B"
            hint: "`{if}` password `{is}` ... `{print}` 'Correct!'!'"
            question_score: '10'
        4:
            question_text: "What does Hedy print when you type in the wrong password?"
            code: |-
                password {is} {ask} 'What is the password?'
                {if} password {is} SECRET {print} 'Correct!'
                {else} {print} 'ALARM! INTRUDER!'
            mp_choice_options:
            -   option: "Correct"
                feedback: "That's printed if the correct answer is given, not the wrong one..."
            -   option: "SECRET"
                feedback: "That's not the right answer"
            -   option: "Wrong!"
                feedback: "No, this is not what Hedy will print"
            -   option: "ALARM! INTRUDER!"
                feedback: "Great job!"
            correct_answer: "D"
            hint: "Your computer will sound the alarm for intruders!"
            question_score: '10'
        5:
            question_text: "Why will Hedy say 'ALARM! INTRUDER' when you type in 'secret'?"
            code: |-
                password {is} {ask} 'What is the password?'
                {if} password {is} SECRET {print} 'Correct!'
                {else} {print} 'ALARM! INTRUDER!'
            mp_choice_options:
            -   option: "Because it needs to be in capitals, so SECRET"
                feedback: "Indeed!"
            -   option: "Because the password is alarm"
                feedback: "No, this is not the password."
            -   option: "Because it's spelled wrong."
                feedback: "That's not how you spell secret"
            -   option: "Because Hedy makes a mistake"
                feedback: "No, Hedy is right"
            correct_answer: "A"
            hint: "The spelling of the word has to be exactly the same."
            question_score: '10'
        6:
            question_text: "Which word should be on the place of the question mark in the last line?"
            code: |-
                {print} 'Im Hedy the football fortune teller!'
                {print} 'I will predict what place your team will end up!'
                club is {ask} 'Which club is your favorite?'
                {if} club {is} ajax {print} 'Ajax is going to win of course!'
                _?_ {print} 'Sorry, your club is gonna be in last place...'
            mp_choice_options:
            -   option: |
                    ```
                    {if}
                    ```
                feedback: "`{if}` is already in the line above"
            -   option: |
                    ```
                    {at} {random}
                    ```
                feedback: "No, you need `{else}`."
            -   option: |
                    ```
                    {else}
                    ```
                feedback: "Great!"
            -   option: |
=======

                    After Baby Shark you can of course also program other songs. There are many songs with repetition.
                start_code: "{print} 'Baby Shark'"
            8:
                story_text: |
                    ## Songs
                    In a previous level you've programmed the song 'Bottles of beer'. You made one verse and then had to copy the verses 99 times. In this level you can repeat the song 99 times, just by adding one simple line!
                    Do you know which line of code to add on the blanks?
                example_code: |
                    ```
                    verse = 99
                    _ _ _
                        {print} verse ' bottles of beer on the wall'
                        {print} verse ' bottles of beer'
                        {print} 'Take one down, pass it around'
                        verse = verse - 1
                        {print} verse ' bottles of beer on the wall'
                    ```
                start_code: "# place your code here"
            10:
                story_text: |
                    ## Songs
                    In this level you can easily make the childrens' song 'Five little monkeys'. Can you make the last chorus?
                    You can also make the whole baby shark song (including all the other sharks in the family) in only 6 lines, using `{for}`!
                    Or you can make Old McDonald with all the different animals.



                    ## Challenges
                    Can you add the last verse of the monkeys on the bed, when there is only one monkey left?

                    Can you make the baby shark code even shorter by using a `{repeat}` command?

                    Can you add new animals to Old MacDonald's farm?

                example_code: |
                    ## 5 Little Monkeys Jumping on the bed
                    ```
                    monkeys = 5, 4, 3, 2
                    {for} monkey {in} monkeys
                        {print} monkey ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```

                    ## Baby Shark
                    ```
                    sharks = baby, mommy, daddy, grandma, grandpa
                    {for} shark {in} sharks
                        {print} shark ' shark tututututudu'
                        {print} shark ' shark tututututudu'
                        {print} shark ' shark tututututudu'
                        {print} shark ' shark'
                    ```
                    ## Old McDonald
                    ```
                    animals = pig, dog, cow
                    {for} animal {in} animals
                        {if} animal {is} pig
                            sound = oink
                        {if} animal {is} dog
                            sound = woof
                        {if} animal {is} cow
                            sound = moo
                        {print} 'Old McDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```
                start_code: "# place your code here"
            11:
                story_text: |
                    ## Songs
                    In this level you can use the `{for} i {in} {range}` command to make songs that use counting, like the 5 little monkeys.

                    ## Challenge
                    Fill in the blanks and make the code work!
                example_code: |
                    ## 5 little monkeys
                    ```
                    _ _ _ _ 5 _ 1
                        {print} i ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {if} i {is} 1
                            {print} 'PUT THOSE MONKEYS RIGHT TO BED!'
                        {else}
                            {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```
                start_code: "# place your code here"
            12:
                story_text: |
                    ## Sing a song!
                    In this song we can make it even easier to program 'if you're happy and you know it, clap your hands'. Because we can put all of the actions in a variable, check it out:

                    ## Challenge
                    Can you add the right amount of indentation to each line to make the song play correctly?
                    Mind: Not all lines need indentation
                example_code: |
                    ```
                    _ actions = 'clap your hands', 'stomp your feet', 'shout Hurray!'
                    _ {for} action {in} actions
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} 'if youre happy and you know it'
                    _ {print} action
                    _ {print} 'if youre happy and you know it and you really want to show it'
                    _ {print} 'if youre happy and you know it'
                    _ {print} action
                    ```
                start_code: "# place your code here"
            16:
                story_text: |
                    ## Sing a song!
                    In this level, you can program a song like OldMacDonald even more quickly. You can connect the right animal to the right sound by simply putting them in the same place in the list.
                    The Drunken Sailor is also quickly made in this level. You only need 8 lines for the entire song, check it out!
                example_code: |
                    ## Old MacDonald
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        animal = animals[i]
                        sound = sounds[i]
                        {print} 'Old McDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```

                    ## Drunken Sailor
                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines
                        {for} i {in} {range} 1 {to} 3
                            {print} line
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: "# place your code here"
    turtle:
        name: "Turtle"
        description: "Make your own drawing"
        default_save_name: "Turtle"
        levels:
            1:
                story_text: |
                    ## Let's draw
                    You can also use Hedy to draw. By combining turns and lines, you can make a square or stairs!

                    Using `{forward}` you draw a line forwards. The number behind it determines how far the turtle will walk. `{turn} {right}` turns a quarter turn in clockwise direction, `{turn} {left}` turns counter clockwise.

                    If you want to go backwards, you use the `{forward}` command but with a negative number. So for example `{forward} -100`

                    ## Challenge
                    This is the start of a little staircase. Can you make it have 5 steps?

                example_code: |
                    ```
                    {forward} 50
                    {turn} {right}
                    {forward} 50
                    {turn} {left}
                    {forward} 50
                    ```
                start_code: "{forward} 50\n{turn} {left}"
            2:
                story_text: |
                    ## Turtle
                    In this level you can use variables to make the turtle interactive. For example you can ask the player how many steps the turtle must make.
                example_code: |
                    ```
                    answer {is} {ask} How many steps should the turtle make?
                    {forward} answer
                    ```
                story_text_2: |
                    Also, in level 1 the turtle could only turn left or right. That is a bit boring!
                    In level 2 he can point his nose in all directions.

                    Use 90 to turn a quarter. We call this degrees. A full turn is 360 degrees.

                    ## Challenge
                    Can you make a figure with this code? Maybe a triangle or a circle?
                example_code_2: |
                    ```
                    {print} Drawing figures
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                start_code: |-
                    {print} Turtle race!
                    angle {is} 90
                    {turn} angle
                    {forward} 25
            3:
                story_text: |
                    ## Searching turtle
                    In this level you can use use `{at} {random}` with the drawing turtle. A random choice makes the turtle walk a different path each time.
                    Use `{at} {random}` to choose a value from a list.
                    ## Challenge
                    Can you copy and paste lines 2 and 3 to create a longer random path?
                example_code: |
                    ```
                    angles {is} 10, 50, 90, 150, 250
                    {turn} angles {at} {random}
                    {forward} 25
                    ```
                start_code: |-
                    angles {is} 10, 50, 90, 150, 250
                    {turn} angles {at} {random}
                    {forward} 25
            4:
                story_text: |
                    ## Let's draw
                    In level 4 you have to use quotation marks with `{print}` and `{ask}`. Also when drawing!
                example_code: |
                    ```
                    {print} _ Drawing figures _
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                story_text_2: |
                    ## Colors
                    You can also change the color of the lines with the command `{color}`. Check out the example.
                    You can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.

                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
                start_code: |-
                    {print} 'Drawing figures'
                    angle {is} 90
                    {turn} angle
                    {forward} 25
            5:
                story_text: |
                    ## Let's draw
                    In level 5 you can make a choice with `{if}`. For example between different types of figures.
                example_code: |
                    ```
                    {print} 'Drawing Figures'
                    figure {is} {ask} 'Do you want a square or a triangle?'
                    {if} figure {is} triangle angle {is} 120
                    {else} angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                start_code: |-
                    {print} 'Drawing Figures'
                    figure {is} {ask} 'Do you want a square or a triangle?'
                    {if} figure {is} triangle angle {is} 120 {else} angle {is} 90
                    {turn} angle
                    {forward} 25
            6:
                story_text: |
                    ## Let's draw
                    In this level you can use calculations to draw different figures.
                    You may have learned in school that turning a full circle is 360 degrees. If not, now you know!
                    That's why you also use 90 degrees for a square. 360 divided by 4 is 90.
                    Now that we can do math with Hedy, we can draw all the figures we want!

                example_code: |
                    ```
                    angles = {ask} 'How many angles do you want?'
                    angle = 360 / angles
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    ```
                start_code: |-
                    {print} 'Drawing figures'
            7:
                story_text: |
                    ## Let's draw
                    In this level you can repeat one line of code with `{repeat}`.

                example_code: |
                    ```
                    {print} 'Draw figures'
                    _ 3 _ {forward} 10
                    ```
                start_code: |-
                    {print} 'Draw figures'
                    {repeat} 3 {times} {forward} 10
            8:
                story_text: |
                    ## Let's draw
                    Now that we can repeat several lines, we can make figures more easily.
                    We only have to set the angle once and then use that variable in the `{repeat}`.

                example_code: |
>>>>>>> Stashed changes
                    ```
                    {print}
                    ```
<<<<<<< Updated upstream
                feedback: "`{print}` is already there, we need a word before it!"
            correct_answer: "C"
            hint: "`{if}` goes together with...?"
            question_score: '10'
        7:
            question_text: "Which word should be in the place of the question mark?"
            code: |-
                {print} 'I can predict if you will be a millionair or not!'
                name {is} {ask} 'Whats your name?'
                {if} name {is} Hedy {print} 'You will be a millionair!'
                {else} _?_ 'Unfortunately... No big money for you.'
            mp_choice_options:
            -   option: |
=======
                story_text_2: |
                    ## Interaction
                    Also, we can now improve the program that draws different figures.
                    Can you figure out how far the turtle has to turn here? Finish the code and you can draw any polygon you'd like!

                example_code_2: |
                    ```
                    angles = {ask} 'How many angles should I draw?'
                    angle = 360 / angles
                    {repeat} angle {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: |-
                    angles = {ask} 'How many angles should I draw?'
    dishes:
        name: "Dishes?"
        description: "Use the computer to see who does the dishes (Start at level 2)"
        default_save_name: "Dishes"
        levels:
            3:
                story_text: |
                    ## Dishwashing
                    Do you always disagree at home about who should wash the dishes or change the litter box today?
                    Then you can let the computer choose very fairly. You can program that in this level!
                    You first make a list of the members of your family. Then choose `{at} {random}` from the list.
                example_code: |
                    ```
                    people {is} mom, dad, Emma, Sophie
                    {print} people {at} {random}
                    ```
                story_text_2: |
                    ## Hack the dishwashing program!
                    Don't feel like doing the dishes yourself? Hack the program by removing your name from the list with the `{remove}` `{from}` command.
                example_code_2: |
                    ```
                    people {is} mom, dad, Emma, Sophie
                    your_name {is} {ask} Who are you?
                    _ your_name _ people
                    {print} _ _ _ does the dishes
                    ```
                start_code: "{print} Who does the dishes?"
            4:
                story_text: |
                    ## Dishwashing
                    With quotation marks you can make your dishwashing planning more beautiful.
                    This time the sample code is not quite complete.

                    Can you complete the code by filling the blanks? Every blank must be replaced with one word of symbol.

                    Tip: Don't forget the quotation marks!
                example_code: |
>>>>>>> Stashed changes
                    ```
                    {if}
                    ```
                feedback: "`{if}` is in the line above."
            -   option: |
                    ```
<<<<<<< Updated upstream
                    {at} {random}
                    ```
                feedback: "No, you don't need `{at} {random}`."
            -   option: |
                    ```
                    {else}
=======

                    Now you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.
                    Do you make the code for the whole week?
                story_text_2: |
                    ## Make it fair
                    If you are extremely unlucky the previous program might choose you to to the dishes for the whole week! That's not fair!
                    To create a fairer system you can use the `{remove}` command to remove the chosen person from the list. This way you don't have to do the dishes again untill everybody has had a turn.

                    Monday and tuesday are ready for you! Can you add the rest of the week?
                    And... can you come up with a solution for when your list is empty?
                example_code_2: |
                    ```
                    people = mom, dad, Emma, Sophie
                    dishwasher = people {at} {random}
                    {print} 'Monday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    {print} 'Tuesday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    ```
                start_code: "{print} 'Who does the dishes?'"
            7:
                story_text: |
                    ## Dishwashing
                    With the `{repeat}` you can repeat pieces of code. You can use this to calculate who will be washing dishes for the entire week.
                example_code: |
                    ```
                    people = mom, dad, Emma, Sophie
                    {repeat} _ _ {print} 'the dishwasher is' _
                    ```
                start_code: "{print} 'Who does the dishes?'"
            10:
                story_text: |
                    ## Dishwashing
                    In this level you could make an even better dish washing shedule.
                example_code: |
                    ```
                    days = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
                    names = mom, dad, Emma, Sophie
                    _ day _ days
                        {print} names {at} {random} ' does the dishes on ' day
                    ```
                start_code: "# place your code here"
    dice:
        name: "Dice"
        description: "Make your own dice"
        default_save_name: "Dice"
        levels:
            3:
                story_text: |
                    ## Dice
                    In this level we can choose from a list. With that we can let the computer choose one side of the die.
                    Take a look at the games you have in your closet at home.
                    Are there games with a (special) die? You can also copy it with this code.
                    For example, the dice of the game Earthworms with the numbers 1 to 5 and an earthworm on it.

                    ![Die of earthworms with 1 to 5 and an earthworm on it](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    {print} choices {at} {random}
                    ```
                story_text_2: |
                    ## Challenge
                    The dice in the example above are dice for a specific game. Can you make normal dice?
                    Or other special dice from a different game?
                example_code_2: |
                    ```
                    choices {is} _
                    ```
                start_code: "{print} What will the die indicate this time?"
            4:
                story_text: |
                    ## Dice
                    In this level we can make sentences with the die value in the sentence, with quotes of course.
                    This time the sample code is not quite complete. Can you finish the code?
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    {print} _ you threw _
                    {print} _ _ _ <- here you have to program the choice
                    ```
                start_code: "{print} 'What will the die indicate this time?'"
            5:
                story_text: |
                    ## Dice
                    You can also make a die again in this level using the `{if}`.
                    Complete the sample code so that the code says "You can stop throwing" once you have thrown an earthworm.

                    But maybe you want to recreate a die from a completely different game. That's fine too! Then make up your own reaction. Eg 'yes' for 6 and 'pity' for something {else}.
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    throw {is} _
                    {print} 'you have' _ 'thrown'
                    {if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'
                    ```
                start_code: "{print} 'What will the die indicate this time?'"
            6:
                story_text: |
                    ## Dice
                    You can also make an Earthworm die again in this, but now you can also calculate how many points have been rolled.
                    You may know that the worm counts 5 points for Earthworms. Now after a roll you can immediately calculate how many points you have thrown.
                    This is the code to calculate points for one die:

                    ## Challenge
                    Can you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    points = 0
                    throw = choices {at} {random}
                    {print} 'you threw' throw
                    {if} throw {is} earthworm points = points + 5 {else} points = points + throw
                    {print} 'those are' points ' point'
                    ```
                example_code_2: |
                    ## Looking forward

                    Did you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!
                start_code: "{print} 'What will the die indicate this time?'"
            7:
                story_text: |
                    ## Dice
                    You can also make a die again in level 5. With the `{repeat}` code you can easily roll a whole hand of dice.
                    Try to finish the sample code! The dashes should contain multiple commands and characters.

                    But maybe you want to make a completely different die. Of course you can!
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    {repeat} _ _ {print} _ _ _
                    ```
                start_code: "{print} 'What will the die indicate this time?'"
            10:
                story_text: |
                    ## Dice
                    Is everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!
                    Can you fill in the correct line of code on the blanks?
                example_code: |
                    ```
                    players = Ann, John, Jesse
                    choices = 1, 2, 3, 4, 5, 6
                    _
                        {print} player ' throws ' choices {at} {random}
                        {sleep}
                    ```
                start_code: "# place your code here"
            15:
                story_text: |
                    ## Dice
                    In this game you have to throw 6 in as little tries as possible.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    {while} thrown != 6
                        thrown = options {at} {random}
                        {print} 'You threw ' thrown
                        tries = tries + 1
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
                start_code: "# place your code here"
    rock:
        name: "Rock, paper, scissors"
        description: "Make your own rock, paper, scissors game"
        default_save_name: "Rock"
        levels:
            1:
                story_text: |
                    ## Rock, paper, scissors
                    In level 1 you can start with a rock, paper, scissors  game.

                    With `{ask}` you can make a choice, and with `{echo}` you can repeat that choice.
                example_code: |
                    ```
                    {print} what do you choose?
                    {ask} choose from rock, paper or scissors
                    {echo} so your choice was:
                    ```
                story_text_2: |
                    ## Challenge
                    Instead of using words, you could also use emojis: ✊✋✌
                    Can you create a code using emojis?
                example_code_2: |
                    ```
                    {print} what do you choose?
                    {ask} choose from _
                    {echo} so your choice was:
                    ```
                start_code: "{print} Welcome to your own rock scissors paper!"
            2:
                story_text: |
                    ## Rock, paper, scissors
                    In this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!

                example_code: |
                    ```
                    _ {is} {ask} rock, paper, or scissors?
                    {print} I choose _
>>>>>>> Stashed changes
                    ```
                feedback: "There already is an `{else}` command"
            -   option: |
                    ```
                    {print}
                    ```
                feedback: "Awesome!"
            correct_answer: "D"
            hint: "After `{else}` a `{print}` command follows"
            question_score: '10'
        8:
            question_text: "Which word should be on the place of the question mark?"
            code: |-
                animal {is} {ask} 'What is your favorite animal?'
                {if} _?_ {is} penguin {print} 'Thats my favorite animal too!'
                {else} {print} 'Cool! I like penguins.'
            mp_choice_options:
            -   option: |
                    ```
                    favorite animal
                    ```
                feedback: "That's not the variable name."
            -   option: |
                    ```
                    animal
                    ```
                feedback: "Great job!"
            -   option: |
                    ```
                    {if}
                    ```
                feedback: "`{if}` is already there"
            -   option: |
                    ```
                    {print}
                    ```
                feedback: "No, that's not it."
            correct_answer: "B"
            hint: "What the variable name?"
            question_score: '10'
        9:
            question_text: "Which door should you choose to escape??"
            code: |-
                {print} 'Escape from the haunted house!'
                {print} 'There are 3 doors in front of you'
                door {is} {ask} 'Which door do you choose?'
                monsters {is} vampire, werewolf, giant spider
                {if} door {is} 2 {print} 'Yay, you can escape!'
                {else} {print} 'You are being devoured by a... ' monsters {at} {random}
            mp_choice_options:
            -   option: "1"
                feedback: "Bad choice! You're being eaten"
            -   option: "2"
                feedback: "Super! You escaped!"
            -   option: "3"
                feedback: "Bad choice! You're being eaten."
            -   option: "It's a trap, you will always be eaten!"
                feedback: "Luckily not!"
            correct_answer: "B"
            hint: "One of the doors will keep you safe.."
            question_score: '10'
        10:
            question_text: "Which monster is standing behind door 1?"
            code: |-
                {print} 'Escape from the haunted house!'
                {print} 'There are 3 doors in front of you'
                door {is} {ask} 'Which door do you choose?'
                monsters {is} vampire, werewolf, giant spider
                {if} door {is} 2 {print} 'Yay, you can escape!'
                {else} {print} 'You are being devoured by a... ' monsters {at} {random}
            mp_choice_options:
            -   option: "Hedy picks a random monster each time."
                feedback: "Awesome!"
            -   option: "vampire"
                feedback: "Not always..."
            -   option: "werewolf"
                feedback: "Not always..."
            -   option: "giant spider"
                feedback: "Not always..."
            correct_answer: "A"
            hint: "Mind the last 3 words... monsters `{at} {random}`..."
            question_score: '10'
    6:
        1:
            question_text: "What's Hedy's output when you run this code?"
            code: "{print} 2*10"
            mp_choice_options:
            -   option: "20"
                feedback: "Correct!"
            -   option: "12"
                feedback: "No, the plus sign is used in addition"
            -   option: "2*10"
                feedback: "No, Hedy will calculate the answer"
            -   option: "210"
                feedback: "Mind it's a calculation."
            correct_answer: "A"
            hint: "The `*` is used as a multiplication sign"
            question_score: '10'
        2:
            question_text: "What do you use when you want to add two numbers?"
            mp_choice_options:
            -   option: "-"
                feedback: "That's not it"
            -   option: "plus"
                feedback: "That's not it"
            -   option: "*"
                feedback: "That's not it"
            -   option: "+"
                feedback: "Correct!"
            correct_answer: "D"
            hint: "It's the plus sign."
            question_score: '10'
        3:
            question_text: "What's Hedy's output when you run this code?"
            code: "{print} '3*10'"
            mp_choice_options:
            -   option: "30"
                feedback: "This would be the right answer if there were no quotation marks."
            -   option: "13"
                feedback: "Try again.."
            -   option: "3*10"
                feedback: "Correct! There are quotation marks, so Hedy will print it literally."
            -   option: "Nothing, Hedy will give an error message."
                feedback: "No, Hedy will print it literally."
            correct_answer: "C"
            hint: "Mind the quotation marks!!"
            question_score: '10'
        4:
            question_text: "Kim is 10 years old. What will Hedy print for her?"
            code: |-
                name = {ask} 'How many letters are in your name?'
                age = {ask} 'How old are you?'
                luckynumber = name*age
                {print} 'Your lucky number is...' luckynumber
            mp_choice_options:
            -   option: "30"
                feedback: "Mind, Hedy also prints 'Your lucky number is...'"
            -   option: "10"
                feedback: "Please try again."
            -   option: "Your lucky number is... 30"
                feedback: "That's right!"
            -   option: "Your lucky number is... 10"
                feedback: "Her lucky number is name times age..."
            correct_answer: "C"
            hint: "Kim has 3 letters, she is 10 years old so: letters times age = 3*10 = 30."
            question_score: '10'
        5:
            question_text: "If 5 people eat at this restaurant, how much do they have to pay in total?"
            code: |-
                {print} 'Welcome to Hedys!'
                people = {ask} 'How many people are eating with us tonight?'
                price = people * 10
                {print} 'That will be ' price 'dollar please'
            mp_choice_options:
            -   option: "5 dollars"
                feedback: "Unfortunately, it's not that cheap."
            -   option: "10 dollars"
                feedback: "No, it's 10 dollars each."
            -   option: "15 dollars"
                feedback: "The * means multiplication."
            -   option: "50 dollars"
                feedback: "Great!"
            correct_answer: "D"
            hint: "`price` `is` `people` `times` 10"
            question_score: '10'
        6:
            question_text: "How much does a hamburger cost is this virtual restaurant?"
            code: |-
                {print} 'Welcome at Hedys diner'
                food = {ask} 'What would you like to eat?'
                price = 0
                {if} food {is} hamburger price = 15
                {if} food {is} fries price = 6
            mp_choice_options:
            -   option: "15 dollars"
                feedback: "Super!"
            -   option: "6 dollars"
                feedback: "The fries are 6 dollars"
            -   option: "0 dollars"
                feedback: "The hamburger isn't free!"
            -   option: "21 dollars"
                feedback: "That's the price for a hamburger and fries!"
            correct_answer: "A"
            hint: "Mind the fourth line."
            question_score: '10'
        7:
            question_text: "Why does line 7 say 'price is price + 3' instead of 'price is 3'?"
            code: |-
                {print} 'Welcome at Hedys diner'
                food = {ask} 'What would you like to eat?'
                price = 0
                {if} food {is} hamburger price = price + 15
                {if} food {is} fries price = price + 6
                drinks is {ask} 'What would you like to drink?'
                {if} drinks {is} coke price = price + 3
                {if} drinks {is} water price = price + 1
                {print} price ' dollars please'
            mp_choice_options:
            -   option: "It could have been `price = 3` just as well."
                feedback: "No, that's not true. Hedy needs to add 3 dollars to the total."
            -   option: "Because Hedy doesn't understand `price = 3`."
                feedback: "Hedy would understand, but it wouldn't be right."
            -   option: "Because Hedy would otherwise forget about the previous order. The price would be 3 dollars in total."
                feedback: "That's right!"
            -   option: "Because the price is 0 dollars to begin with."
                feedback: "That's true, but not the reason"
            correct_answer: "C"
            hint: "The price shouldn't be 3, but 3 dollars more than it already was"
            question_score: '10'
        8:
            question_text: "Why is this code incorrect?"
            code: |-
                correct answer = 3*12
                answer = {ask} 'What is 3 times 12?'
                {if} answer {is} correct answer {print} 'Good job!'
                {else} {print} 'No... It was ' correct answer
            mp_choice_options:
            -   option: "There shouldn't be quotation marks in line 2"
                feedback: "No, there should be!"
            -   option: "The variable is called correct answer, but a variable's name can only be 1 word. So it should be correct_answer"
                feedback: "Correct!"
            -   option: "The `{if}` and `{else}` commands should be in the same line."
                feedback: "No, that's not true."
            -   option: "The variable in line 2 can't be called answer, because it is too similar to the variable correct answer."
                feedback: "Variable names can be similar, but they can't be 2 words..."
            correct_answer: "B"
            hint: "Inspect what the variables are called."
            question_score: '10'
        9:
            question_text: "Imagine you love football a 10, you've eaten 2 bananas and have washed your hands 3 times today. How smart does the silly fortune teller think you are?"
            code: |-
                {print} 'Im Hedy the silly fortune teller'
                {print} 'I will predict how smart you are!'
                football = {ask} 'On a scale of 0 to 10 how much do you love football?'
                bananas = {ask} 'How many bananas have you eaten this week?'
                hygiene = {ask} 'How many times did you wash your hands today??'
                result = bananas + hygiene
                result = result * football
                {print} 'You are ' result 'percent smart.'
            mp_choice_options:
            -   option: "10%"
                feedback: "(2 bananas + 3 hygiene) * 10 football = 5*10 =?"
            -   option: "32%"
                feedback: "(2 bananas + 3 hygiene) * 10 football = 5*10 =?"
            -   option: "50%"
                feedback: "Super! You are 100 percent smart!"
            -   option: "100%"
                feedback: "(2 bananas + 3 hygiene) * 10 football = 5*10 =?"
            correct_answer: "C"
            hint: "(2 bananas + 3 hygiene) * 10 football = 5*10 =?"
            question_score: '10'
        10:
            question_text: "Which statement is true?"
            code: |-
                name _?_ Hedy
                {print} name 'is walking trough the forrest'
            mp_choice_options:
            -   option: "You can only fill in the word is on the `_?_`"
                feedback: "You are allowed to use the `=` sign as well"
            -   option: "You can fill in either the word is or the `=` sign on the `_?_`"
                feedback: "Amazing!"
            -   option: "You have to fill in =is= on the `_?_`"
                feedback: "No, one `=` sign is enough"
            -   option: "You can only use the `=` sign when working with numbers, not with words."
                feedback: "You can also use `=` with words."
            correct_answer: "B"
            hint: "`{is}` and `=` are both allowed"
            question_score: '10'
    7:
        1:
            question_text: "How many lines can you repeat at once with the repeat command at this level?"
            mp_choice_options:
            -   option: "0"
                feedback: "No you can repeat a line."
            -   option: "1"
                feedback: "Correct, one line at a time"
            -   option: "2"
                feedback: "In this level only one line at a time"
            -   option: "infinite"
                feedback: "In this level you can only repeat one line at a time"
            correct_answer: "B"
            hint: "You can only repeat 1 line at a time"
            question_score: '10'
        2:
            question_text: "Which code is right?"
            mp_choice_options:
            -   option: |
                    ```
                    {print} 100 {times} 'hello'
                    ```
                feedback: "`{repeat}` 100 `{times}` `{print}` 'hello'"
            -   option: |
                    ```
                    {print} {repeat} 100 {times} 'hello'
                    ```
                feedback: "{repeat} 100 {times} {print} 'hello'"
            -   option: |
                    ```
                    {repeat} 'hello' 100 {times}
                    ```
                feedback: "{repeat} 100 {times} {print} 'hello'"
            -   option: |
                    ```
                    {repeat} 100 {times} {print} 'hello'
                    ```
                feedback: "That's right!"
            correct_answer: "D"
            hint: "First the repeat command, then the `{print}` command"
            question_score: '10'
        3:
            question_text: "Is this code right or wrong?"
            code: "{repeat} 100 {times} 'Hello!'"
            mp_choice_options:
            -   option: "Right"
                feedback: "No, a word is missing"
            -   option: "Wrong, the word `{repeat}` is missing"
                feedback: "The word `{repeat}` is there, another word is missing"
            -   option: "Wrong, the word `{times}` is missing"
                feedback: "The word `{times}` is there, another word is missing."
            -   option: "Wrong, the word `{print}` is missing"
                feedback: "Correct"
            correct_answer: "D"
            hint: "It should be: `{repeat}` 100 `{times}` `{print}` 'Hello'"
            question_score: '10'
        4:
            question_text: "Which word is wrong in the code?"
            code: |-
                {print} 'I'm blue'
                {repeat} 7 {times} {print} 'da ba dee, da ba da'
            mp_choice_options:
            -   option: |
                    ```
                    I'm
                    ```
                feedback: "That's right!"
            -   option: |
                    ```
                    {print}
                    ```
                feedback: "`{print}` is spelled correctly"
            -   option: |
                    ```
                    {repeat}
                    ```
                feedback: "`{repeat}` is spelled correctly"
            -   option: |
                    ```
                    {times}
                    ```
                feedback: "`{times}` is spelled correctly"
            correct_answer: "A"
            hint: "I'm is wrong, you can't use apostrophes"
            question_score: '10'
        5:
            question_text: "Is this code right or wrong?"
            code: |-
                {repeat} 100 {times} {print} 'Hedy is awesome!'
            mp_choice_options:
            -   option: "Correct"
                feedback: "That's right!"
            -   option: "Wrong"
                feedback: "That's not it"
            correct_answer: "A"
            hint: "The code is correct!"
            question_score: '10'
        6:
            question_text: "What will be the output from this code?"
            code: |-
                {print} 'The wheels on the bus go'
                {repeat} 3 {times} {print} ' round and round'
            mp_choice_options:
            -   option: "the wheels on the bus go\nround and round"
                feedback: "Only the second line is repeated 3 times"
            -   option: "the wheels on the bus go\nthe wheels on the bus go\nthe wheels on the bus go\nround and round"
                feedback: "Only the second line is repeated 3 times"
            -   option: "the wheels on the bus go\nround and round\nthe wheels on the bus go\nround and round\nthe wheels on the bus go\nround and round"
                feedback: "Only the second line is repeated 3 times"
            -   option: "the wheels on the bus go\nround and round\nround and round\nround and round"
                feedback: "All though the town! Perfect!"
            correct_answer: "D"
            hint: "Only 'round and round' is repeated 3 times."
            question_score: '10'
        7:
            question_text: "What will be the output from this code?"
            code: |-
                {repeat} 2 {times} {print} 'We will'
                {print} 'ROCK YOU!'
            mp_choice_options:
            -   option: "We will We will\nROCK YOU!"
                feedback: "'We will' won't appear twice in the same line"
            -   option: "We will\nWe will\nROCK YOU!"
                feedback: "Great!"
            -   option: "We will\nROCK YOU!\nWe will\nROCK YOU!"
                feedback: "ROCK YOU! won't be repeated"
            -   option: "We will\nROCK YOU!"
                feedback: "Mind the repeat command"
            correct_answer: "B"
            hint: "Mind the `{repeat}` command."
            question_score: '10'
        8:
            question_text: "What Hedy code belongs to this output?"
            code: "Here comes the sun\nDo do do do\nHere comes the sun\nAnd I say\nIts alright"
            mp_choice_options:
            -   option: |
                    ```
                    {print} 'Here comes the sun'
                    {print} 'Do do do do'
                    {print} 'Here comes the sun'
                    {print} 'And I say'
                    {print} 'Its alright'
                    ```
                feedback: "Awesome, you can't use the `{repeat}` command here."
            -   option: |
                    ```
                    {repeat} 2 {times} {print} 'Here comes the sun'
                    {print} 'And I say'
                    {print} 'Its alright'
                feedback: "Where did you leave 'Do do do do'?"
            -   option: |
                    ```
                    {repeat} 2 {times} {print} 'Here comes the sun'
                    {print} 'Do do do do'
                    {print} 'And I say'
                    {print} 'Its alright'
                    ```
                feedback: "This is not the correct order.."
            -   option: |
                    ```
                    {repeat} 2 {times} {print} 'Here comes the sun'
                    {repeat} 2 {times} {print} 'Do do'
                    {print} 'And I say'
                    {print} 'Its alright'
                    ```
                feedback: "This is not the correct order.."
            hint: "`{repeat}` can only be used if you want to execute the same line multiple times in a row."
            correct_answer: "A"
            question_score: '10'
        9:
            question_text: "What Hedy code belongs to this output?"
            code: |-
                Batman was flying through Gotham.
                When suddenly he heard someone screaming...
                Help!
                Help!
                Help!
                Please help me!
            mp_choice_options:
            -   option: |
                    ```
                    {print} 'Batman was flying through Gotham. '
                    {print} 'When suddenly he heard someone screaming...'
                    {print} 'Help!'
                    {repeat} 3 {times} {print} 'Please help me!'
                    ```
                feedback: "Your repeated line is incorrect."
            -   option: |
                    ```
                    {print} 'Batman was flying through Gotham.'
                    {print} 'When suddenly he heard someone screaming...'
                    {repeat} 3 {times} 'Help!'
                    {print} 'Please help me!'
                    ```
                feedback: "The `{print}` command is missing on line 3."
            -   option: |
                    ```
                    {print} Batman was flying through Gotham.
                    {print} When suddenly he heard someone screaming...
                    {repeat} 3 {times} {print} Help!
                    {print} Please help me!
                    ```
                feedback: "You're missing the quotation marks"
            -   option: |
                    ```
                    {print} 'Batman was flying through Gotham.'
                    {print} 'When suddenly he heard someone screaming...'
                    {repeat} 3 {times} {print} 'Help!'
                    {print} 'Please help me!'
                    ```
                feedback: "Perfect"
            question_score: '10'
            hint: "'Help!' is repeated 3 times."
            correct_answer: "D"
        10:
            question_text: "What Hedy code belongs to this output?"
            code: |-
                if youre happy and you know it clap your hands
                if youre happy and you know it clap your hands
                if youre happy and you know it and you really want to show it
                if youre happy and you know it clap your hands
            mp_choice_options:
            -   option: |
                    ```
                    {repeat} 2 {times} 'if youre happy and you know it clap your hands'
                    {print} 'if youre happy and you know it and you really want to show it'
                    {print} 'if youre happy and you know it clap your hands'
                    ```
                feedback: "Almost! the first line needs an extra word"
            -   option: |
                    ```
<<<<<<< Updated upstream
                    {repeat} 2 {times} {print} 'if youre happy and you know it clap your hands'
                    {print} 'if youre happy and you know it and you really want to show it'
                    {print} 'if youre happy and you know it clap your hands'
=======
                story_text_2: |
                    ## Challenge
                    Now you only have one player, so can you add a second player?
                    You can even use variables to name player 1 and player 2.
                example_code_2: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} player 1 chooses... choices {at} {random}
                    {print} player 2 _
                    ```
                start_code: "{print} Welcome to your own rock scissors paper!"
            4:
                story_text: |
                    ## Rock, paper, scissors
                    In this level we can further program rock, paper, scissors. But {if} you want to add text, you have to use quotation marks here too.
                    Do you complete the code by entering the correct commands or characters on the underscores?

                example_code: |
>>>>>>> Stashed changes
                    ```
                feedback: "Great!"
            -   option: |
                    ```
                    {repeat} 3 {times} {print} 'if youre happy and you know it clap your hands'
                    {print} 'if youre happy and you know it and you really want to show it'
                    ```
<<<<<<< Updated upstream
                feedback: "This is not in the right order."
            -   option: |
                    ```
                    {repeat} 4 {times} 'if youre happy and you know it'
                    {repeat} 2 times 'clap your hands'
                    {print} 'and you really want to show it'
                    {print} 'clap your hands'
                    ```
                feedback: "This is not in the right order."
            correct_answer: "B"
            hint: "Mind the order of the sentences."
            question_score: '10'
    8:
        1:
            question_text: "Which output will be produced by this code?"
            code: |-
                {repeat} 2 {times}
                    {print} 'Hello'
                    {print} 'Im Hedy!'
            mp_choice_options:
            -   option: |
                    Hello
                    Im Hedy!
                feedback: "Everything is printed twice."
            -   option: |
                    Hello
                    Hello
                    Im Hedy
                feedback: "The second line is repeated twice as well."
            -   option: |
                    Hello
                    Im Hedy!
                    Hello
                    Im Hedy!
                feedback: "Super!"
            -   option: |
                    Hello
                    Hello
                    Im Hedy!
                    Im Hedy!
                feedback: "Everything is printed twice"
            correct_answer: "C"
            hint: "Both lines are repeated twice."
            question_score: '10'
        2:
            question_text: "What is wrong with this code?"
            code: |-
                {repeat} 5 {times}
                {print} 'Hedy is cool!'
            mp_choice_options:
            -   option: "This should be only one line, not 2."
                feedback: "No it should be 2 lines."
            -   option: "This `{print}` command has to be removed."
                feedback: "No, you need it."
            -   option: "There is a spelling mistake in the `{repeat}` command."
                feedback: "Nee, repeat is de goede spelling"
            -   option: "The second line need to start with 4 spaces as indentation."
                feedback: "Correct!"
            correct_answer: "D"
            hint: "Something is missing in the second line?"
            question_score: '10'
        3:
            question_text: "What output will be produced when you run this program?"
            code: |-
                {repeat} 3 {times}
                    {print} 'Baby shark tututudutudu'
                {print} 'Baby shark'
            mp_choice_options:
            -   option: |
                    Baby shark tututudutudu
                    Baby shark
                feedback: "Mind the `{repeat}` command!"
            -   option: |
                    Baby shark tututudutudu
                    Baby shark
                    Baby shark tututudutudu
                    Baby shark
                    Baby shark tututudutudu
                    Baby shark
                feedback: "The last line has no indentation, so it's not repeated."
            -   option: |
                    Baby shark tututudutudu
                    Baby shark tututudutudu
                    Baby shark tututudutudu
                    Baby shark
                feedback: "Right!"
            -   option: |
                    Baby shark tututudutudu
                    Baby shark
                    Baby shark
                    Baby shark
                feedback: "What is being repeated and what isn't."
            correct_answer: "C"
            hint: "What is being repeated and what is not?."
            question_score: '10'
        4:
            question_text: "Which output is correct?"
            code: |-
                {print} 'The children went:'
                {repeat} 2 {times}
                    {print} 'Yay!'
                    {print} 'We are going on vacation!'
            mp_choice_options:
            -   option: |
                    The children went:
                    Yay!
                    We are going on vacation!
                feedback: "Mind the `{repeat}` command!"
            -   option: |
                    The children went:
                    Yay!
                    We are going on vacation!
                    Yay!
                    We are going on vacation!
                feedback: "Correct!"
            -   option: |
                    The children went:
                    Yay!
                    Yay!
                    We are going on vacation!
                    We are going on vacation!
                feedback: "This order is incorrect."
            -   option: |
                    The children went:
                    Yay!
                    Yay!
                    We are going on vacation!
                feedback: "The last line is repeated too."
            correct_answer: "B"
            hint: "The block under the `{repeat}` command is repeated twice."
            question_score: '10'
        5:
            question_text: "What is wrong with this code?"
            code: |-
                end = {ask} 'Do you want a happy or a sad ending?'
                {if} end {is} happy {print} 'They lived happily ever after'
                {else} {print} 'The world exploded. The end.'
            mp_choice_options:
            -   option: "The `{print}` commands on the last two lines should start on new lines and start with 4 spaces."
                feedback: "That's right!"
            -   option: "`{else}` is not a command!"
                feedback: "It is!"
            -   option: "Lines that start with `{if}` should start with 4 spaces"
                feedback: "That's not true"
            -   option: "`{ask}` is no longer a command"
                feedback: "That's not true"
            correct_answer: "A"
            hint: "Something is wrong with indentation"
            question_score: '10'
        6:
            question_text: "Which code was used to create this output?"
            output: |-
                Welcome to restaurant Hedy
                Pizza
                Hamburger
            mp_choice_options:
            -   option: |
                    ```
                    {print} 'Welcome to restaurant Hedy'
                    food = {ask} 'What would you like to eat?'
                    {print} food
                    ```
                feedback: "You need to take 2 orders."
            -   option: |
                    ```
                    {repeat} 2 {times}
                        {print} 'Welcome to restaurant Hedy'
                        food = {ask} 'What would you like to eat?'
                        {print} food
                    ```
                feedback: "The welcome line would be printed twice in this code too"
            -   option: |
                    ```
                    {print} 'Welcome to restaurant Hedy'
                    {repeat} 2 {times}
                        food = {ask} 'What would you like to eat?'
                    {print} food
=======

                    Fill in the correct code on the blanks to see {if} it is a draw.

                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            9:
                story_text: |
                    ## Rock, paper, scissors
                    In this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    your_choice {is} {ask} 'What do you choose?'
                    {print} 'You choose ' your_choice
                    computer_choice {is} choices {at} {random}
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} rock
                        {if} your_choice {is} paper
                            {print} 'You win!'
                        {if} your_choice {is} scissors
                            {print} 'You lose!'
                    # finish this code
                    ```
                start_code: "# place your code here"
            10:
                story_text: |
                    ## Rock, Paper, Scissors
                    Feeling too lazy to play the game yourself? Let Hedy play it for you!
                    You only have to fill in the names of the players.
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    players = _
                    {for} player {in} players
                         {print} player ' chooses ' choices {at} {random}
                    ```
                start_code: "# place your code here"
            13:
                story_text: |
                    ## Rock, paper, scissors
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.

                example_code: |
                    ```
                    options = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = options {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'You win!'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'The computer wins!'
                    _
                    ```
                start_code: "# place your code here"
            15:
                story_text: |
                    ## Rock, Paper, Scissors
                    Play until you beat the computer! But first, finish the example code...

                example_code: |
                    ```
                    won = 'no'
                    options = 'rock', 'paper', 'scissors'
                    {while} won == 'no'
                        your_choice = {ask} 'What do you choose?'
                        computer_choice = options {at} {random}
                        {print} 'you chose ' your_choice
                        {print} 'the computer chose ' computer_choice
                        {if} computer_choice == your_choice
                            {print} 'Tie!'
                        {if} computer_choice == 'rock' {and} your_choice == 'scissors'
                            {print} 'You lose!'
                        {if} computer_choice == 'rock' {and} your_choice == 'paper'
                            {print} 'You win!'
                            won = 'yes'
                    _
                    ```
                start_code: "# place your code here"
    calculator:
        name: "Calculator"
        description: "Create a calculator"
        default_save_name: "Calculator"
        levels:
            6:
                story_text: |
                    ## Calculator
                    Now that you can do maths, you can make a calculator yourself!
                example_code: |
                    ```
                    number_1 {is} {ask} 'Fill in the first number:'
                    number_2 {is} {ask} 'Fill in the second number:'
                    correct_answer = number_1 * number_2
                    {print} number_1 ' times ' number_2 ' is ' correct_answer
                    ```
                story_text_2: |
                    ## Challenge
                    The calculator above will calculate the answer for you, but you can also make a program to test your own maths skills, like this:
                    Fill in the blanks to make it complete!
                example_code_2: |
                    ```
                    correct_answer = 11 * 27
                    answer = {ask} 'How much is 11 times 27?'
                    {if} answer {is} _ {print} 'good job!'
                    {else} {print} 'Wrong! It was ' _
                    ```
                story_text_3: |
                    ## Random numbers
                    You can also let the computer do random sums on its own using random.
                    This is how you choose a number of tables to practice, and from that you always get a different sum:
                example_code_3: |
                    ```
                    tables = 4, 5, 6, 8
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    table = tables {at} {random}
                    number = numbers {at} {random}
                    correct_answer = table * number
                    answer = {ask} 'how much is ' table ' times ' number '?'
                    {if} answer {is} correct_answer {print} 'okay'
                    {else} {print} 'mistake! it was ' correct_answer
                    ```

                start_code: "{print} 'Welcome to this calculator!'"
            9:
                story_text: |
                    ## Calculator
                    In previous levels you've learned how to make a calculator, in this level you can expand that code and make it into a little maths game.
                    ## Challenge
                    Can you finish line 10 to make to program work?
                example_code: |
                    ```
                    score = 0
                    {repeat} 10 {times}
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number1 = numbers {at} {random}
                        number2 = numbers {at} {random}
                        correct_answer = number1 * number2
                        {print} 'What is ' number1 ' times ' number2 '?'
                        answer = {ask} 'Type your answer here...'
                        {print} 'Your answer is' answer
                        {if} _ {is} _
                            score = score + 1
                    {print} 'Great job! Your score is... ' score ' out of 10!'
                    ```
                start_code: "{print} 'Welcome to this calculator!'"
            10:
                story_text: |
                    ## Calculator
                    This calculator game helps you practise your tables of multiplication!
                    ## Challenge
                    Can you add more numbers to the list, so you can practise all the multiplications?
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} number1 {in} numbers
                        {for} number2 {in} numbers
                            answer = {ask} 'How much is ' number2 ' times ' number1 '?'
                            correct = number1 * number2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'Thats wrong. The right answer is ' correct
                    ```
                start_code: "# place your code here"
            12:
                story_text: |
                    ## Calculator
                    Now you can make a calculator that works for decimal numbers. Fill in the blanks to get it to work properly!
                example_code: |
                    ```
                    number1 = {ask} 'What is the first number?'
                    number2 = {ask} 'What is the second number?'
                    answer = _
                    {print} number1 ' plus ' number2 ' is ' answer
                    ```
                start_code: "# place your code here"
            14:
                story_text: |
                    ## Guess which number
                    In this level you can programm the game 'Guess which number'
                example_code: |
                    ```
                    {print} 'Guess which number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess > number
                                {print} 'Lower!'
                            {if} guess < number
                                {print} 'Higher!'
                            {if} guess == number
                                {print} 'You win!'
                                game = 'over'
                    ```
                start_code: "# place your code here"
            15:
                story_text: |
                    ## Calculator
                    You can add the `{while}` loop to the calculator game you've learned to make in a previous level.
                    This makes sure the player can't continue to the next question {if} they answer incorrectly.
                example_code: |
                    ```
                    score = 0
                    {for} i {in} {range} 0 {to} 9
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number1 = numbers {at} {random}
                        number2 = numbers {at} {random}
                        correct = number1 * number2
                        answer = 0
                        {while} answer != correct
                            {print} 'How much is ' number1 ' times ' number2 '?'
                            answer = {ask} 'Fill in your answer:'
                            {print} 'Your answer is ' answer
                        {print} 'Good job!'
                    {print} 'You win!'
                    ```
                start_code: "# place your code here"
    restaurant:
        name: "Restaurant"
        description: "Create your own virtual restaurant"
        default_save_name: "Restaurant"
        levels:
            1:
                story_text: |
                    ## Restaurant
                     In level 1 you can make your own virtual restaurant and take your guests' orders.
                example_code: |
                    ```
                    {print} Welcome to Hedy's restaurant 🍟
                    {ask} What would you like to order?
                    {echo} So you would like to order
                    {print} Thanks you for your order!
                    {print} It's on its way!
                    ```
                story_text_2: |
                    ## Challenge
                    Can you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?
                start_code: "# place your code here"
            2:
                story_text: |
                    ## Restaurant
                    In level 2 you could expand your restaurant by using variables. In level 1 Hedy could only {echo} the order once and only remember the last thing that was ordered.
                    Now you can use variables and Hedy can remember both the food and the toppings!
                example_code: |
                    ```
                    {print} Welcome to Hedy's restaurant!
                    {print} Today we're serving pizza or lasagna.
                    food {is} {ask} What would you like to eat?
                    {print} Great choice! The food is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} food with topping is on its way!
                    ```
                story_text_2: |
                    ## Challenge
                    Can you make this code more elaborate? For example by adding drinks to the order? Or...?

                example_code_2: |
                    ```
                    {print} Welcome to Hedy's restaurant!
                    {print} Today we're serving pizza or lasagna.
                    food {is} {ask} What would you like to eat?
                    {print} Great choice! The food is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} food with topping is on its way!
                    drinks {is} _
                    ```
                start_code: "# place your code here"
            3:
                story_text: |
                    ## Random Restaurant
                    Having trouble to decide what you wanna have for dinner? You can let Hedy choose for you!
                    Simply add lists of your favorite (or least favorite) meals and Hedy can randomly choose your dinner.
                    You can also have a bit of fun, by letting Hedy choose the price for your dinner as well! What will you get?
                    ## Challenge
                    Can you make your own version of the random restaurant?
                example_code: |
                    ```
                    {print} Welcome to Hedy's Random Restaurant!
                    {print} The only restaurant that will randomly choose your meal and its price for you!
                    starters {is} salad, soup, carpaccio
                    mains {is} pizza, brussels sprouts, spaghetti
                    desserts {is} brownies, ice cream, french cheeses
                    drinks {is} cola, beer, water
                    prices {is} 1 dollar, 10 dollars, 100 dollars
                    {print} You will start with: starters {at} {random}
                    {print} Then we'll serve: mains {at} {random}
                    {print} And as dessert: desserts {at} {random}
                    {print} You will get a drinks {at} {random} to drink
                    {print} That will be: prices {at} {random}
                    {print} Thank you and enjoy your meal!
                    ```
                story_text_2: |
                    ## Allergies
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.

                example_code_2: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    allergies {is} {ask} Are you allergic to any falvors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```
                start_code: "# place your code here"
            4:
                story_text: |
                    ## Restaurant
                    In this level you have to use quotation marks when using the `{print}` or `{ask}` command.

                    ## Challenge
                    Add the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.
                example_code: |
                    ## Example Hedy Restaurant
                    ```
                    _ Add the quotation marks to this code _
                    {print} Welcome to Hedys restaurant!
                    {print} Today we are serving pizza or lasagna.
                    food {is} {ask} What would you like to eat?
                    {print} Great choice! The  food  is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} food  with  topping  is on its way!
                    drinks {is} {ask} What would you like to drink with that?
                    {print} Thank you for your order.
                    {print} Your  food  and  drinks  will be right there!
                    ```
                start_code: "# place your code here"
            5:
                story_text: |
                    ## Restaurant
                    In this level the `{if}` command allows you to `{ask}` your customers questions and give different responses to the answers.
                    In the example below, you see that you can `{ask}` the customer `{if}` they want to hear the specials and Hedy can respond accordingly.

                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    special {is} {ask} 'Would you like to hear our specials today?'
                    {if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'
                    food {is} {ask} 'What would you like to eat?'
                    {print} 'One ' food ', coming right up!'
                    drink {is} {ask} 'What would you like to drink with that?'
                    {if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'
                    anything {is} {ask} 'Would you like anything {else}?'
                    {print} 'Let me repeat your order...'
                    {print} 'One ' food
                    {if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink
                    {if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything
                    {print} 'Thank you for your order and enjoy your meal!'
                    ```
                story_text_2: |
                    ## Challenge
                    Can you think of more questions to `{ask}` the customers when they are ordering, and make up different responses to their answers by using the `{if}` command?

                start_code: "# place your code here"
            6:
                story_text: |
                    ## Restaurant
                    In this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.

                example_code: |4

                    You can make a simple restaurant code, like this:
                    ```
                    {print} 'Welcome to Hedys restaurant'
                    {print} 'Here is our menu:'
                    {print} 'Our main courses are pizza, lasagne, or spaghetti'
                    main = {ask} 'Which main course would you like?'
                    price = 0
                    {if} main {is} pizza price = 10
                    {if} main {is} lasagne price = 12
                    {if} main {is} spaghetti price = 8
                    {print} 'You have ordered ' main
                    {print} 'That will be ' price ' dollars, please'
                    {print} 'Thank you, enjoy your meal!'
                    ```
                story_text_2: |
                    But you can also add many more things to your virtual restaurant, for example more courses.

                    ## Challenge
                    You can add many more things to your virtual restaurant. For example, can you...
                    - {ask} how many people are coming and multiply the price by that amount?
                    - add another course?
                    - give people a discount when they enter a (secret) couponcode?
                    - add a children's menu?
                    - think of other fun things to add?
                example_code_2: |4

                    In this example there are three courses, which requires more code and more additions in calculating the price.
                    ```
                    {print} 'Welcome to Hedys restaurant'
                    {print} 'Here is our menu:'
                    {print} 'Our starters are salad, soup, or carpaccio'
                    {print} 'Our main courses are pizza, lasagne, or spaghetti'
                    {print} 'Our desserts are brownie, icecream, or milkshake'
                    starter = {ask} 'Which starter would you like to have?'
                    main = {ask} 'Which main course would you like?'
                    dessert = {ask} 'Which dessert do you pick?'
                    price = 0
                    {if} starter {is} soup price = price + 6 {else} price = price + 7
                    {if} main {is} pizza price = price + 10
                    {if} main {is} lasagne price = price + 12
                    {if} main {is} spaghetti price = price + 8
                    {if} dessert {is} brownie price = price + 7
                    {if} dessert {is} icecream price = price + 5
                    {if} dessert {is} milkshake price = price + 4
                    {print} 'You have ordered ' starter ' , ' main ' and ' dessert
                    {print} 'That will be ' price ' dollars, please'
                    {print} 'Thank you, enjoy your meal!'
                    ```
                start_code: "# place your code here"
            7:
                story_text: |
                    ## Restaurant
                    In this level you've learned how to use the `{repeat}` command to repeat a line of code a certain amount of times.
                    You can use that in your restaurant to `{ask}` multiple people what they'd like to eat.

                    ## Challenge
                    Can you fill in the blanks? Hedy needs to repeat this question as many times as there are people. So of there are 5 people, the question needs to be asked 5 times.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people are joining us today?'
                    {repeat} _ {times} food = {ask} 'What would you like to eat?'
                    {print} 'Thanks for your order! Its coming right up!'
                    ```
                start_code: "# place your code here"
            8:
                story_text: |
                    ## Restaurant
                    In this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    {repeat} people {times}
                        food = {ask} 'What would you like to order?'
                        {print} food
                    {print} 'Thank you for ordering!'
                    {print} 'Enjoy your meal!'
                    ```
                story_text_2: |
                    ## Challenge
                    Of course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!
                start_code: "# place your code here"
            9:
                story_text: |
                    ## Restaurant
                    In this level you can use nesting to make your restaurant more realistic and more fun!
                    For example you would ask for sauce if somebody orders fries, but you wouldn't if someone orders pizza!

                    ## Challenge
                    This is a challenge for the real brainiacs! Each line that needs indentation has been given a blank.
                    Can you figure out how much indentation each line needs in order for the code to work propperly?
                    Good luck!
                    TIP: If the customer orders pizza, Hedy shouldn't ask what sauce the costumer wants.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    price = 0
                    {repeat} people {times}
                    _ food = {ask} 'What would you like to order?'
                    _ {print} food
                    _ {if} food {is} fries
                    _ price = price + 3
                    _ sauce = {ask} 'What kind of sauce would you like with your fries?'
                    _ {if} sauce {is} no
                    _ {print} 'no sauce'
                    _ {else}
                    _ price = price + 1
                    _ {print} 'with ' sauce
                    _ {if} food {is} pizza
                    _ price = price + 4
                    {print} 'That will be ' price ' dollar'
                    {print} 'Enjoy your meal!'
                    ```
                start_code: "# place your code here"
            10:
                story_text: |
                    ## Restaurant
                    In this level you'll learn how to easily {ask} your guests' orders in a short code.
                example_code: |
                    ```
                    courses = appetizer, main course, dessert
                    {for} course {in} courses
                        food = {ask} 'What would you like to eat as your ' course '?'
                        {print} food ' will be your ' course
                    ```
                story_text_2: |
                    ## Challenge
                    Of course, you could also order for multiple people!
                    Can you add the correct amount of indentation before each line to make the code work properly?
                    TIP: some lines don't need any indentation at all.
                example_code_2: |
                    ```
                    _ courses = appetizer, main course, dessert
                    _ names = Timon, Onno
                    _ {for} name {in} names
                    _ {for} course {in} courses
                    _ food = {ask} name ', what would you like to eat as your ' course '?'
                    _ {print} name ' orders ' food ' as their ' course
                    ```
                start_code: "courses = appetizer, main course, dessert"
            11:
                story_text: |
                    ## Restaurant
                    We can use the `{for} i {in} {range} 1 {to} 5` to `{print}` the orders from multiple customers in an orderly manner.

                    ## Challange
                    Can you handle another indentation challenge? Get the code to work properly by adding the right amount of indentation before each line!
                example_code: |
                    ```
                    {print} 'Welcome to Restaurant Hedy!'
                    people = {ask} 'For how many people would you like to order?'
                    {for} i {in} {range} 1 {to} people
                    _ {print} 'Order number ' i
                    _ food = {ask} 'What would you like to eat?'
                    _ {print} food
                    _ {if} food {is} fries
                    _ sauce = {ask} 'What kind of sauce would you like with that?'
                    _ {print} sauce
                    _ drinks = {ask} 'What would you like to drink?'
                    _ {print} drinks
                    price = 4 * people
                    {print} 'That will be ' price ' dollars, please!'
                    ```
                start_code: "# place your code here"
            12:
                story_text: |
                    ## Restaurant
                    From this level on you can use decimal numbers to make you menu more realistic.

                    ## Challange
                    Can you think of a code to give your friends and family a 15% discount?
                example_code: |
                    ```
                    price = 0
                    food = {ask} 'What would you like to order?'
                    drink = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
                start_code: "# place your code here"
            13:
                story_text: |
                    ## Restaurant
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.

                example_code: |
>>>>>>> Stashed changes
                    ```
                feedback: "Now only the last order is printed."
            -   option: |
                    ```
                    {print} 'Welcome to restaurant Hedy'
                    {repeat} 2 {times}
                        food = {ask} 'What would you like to eat?'
                        {print} food
                    ```
<<<<<<< Updated upstream
                feedback: "Awesome!"
            correct_answer: "D"
            hint: "Pay attention to what sould be repeated and what should only be printed once."
            question_score: '10'
        7:
            question_text: "What is wrong with this code?"
            code: |-
                food = {ask} 'What would you like to eat?'
                {if} food {is} fries
                sauce = {ask} 'What sauce would you like?'
                    {print} 'One fries with ' sauce
                {if} food {is} pizza
                    topping = {ask} 'What topping would you like?'
                    {print} 'One pizza with ' topping
                {print} 'That you for your order'
            mp_choice_options:
            -   option: "Nothing this code is correct!"
                feedback: "Something is wrong!."
            -   option: "You're not allowed to use an `{if}` command after an `{ask}` command."
                feedback: "You are!"
            -   option: "You don't have to use indentation twice. Only in the first `{if}` command."
                feedback: "You always have to use indentation."
            -   option: "The indentation is wrong in the first `{if}` command."
                feedback: "That's right."
            correct_answer: "D"
            hint: "Take a careful look at the indentation."
            question_score: '10'
        8:
            question_text: "In which of the codes is the indentation done right?"
            mp_choice_options:
            -   option: |
                    ```
                    {if} answer {is} 32
                       {print} 'You are...'
                          {sleep}
                              {print} 'right!'
                          {else}
                              {print} 'You are wrong!'
                    ```
                feedback: "You are wrong!"
            -   option: |
                    ```
                    {if} answer {is} 32
                    {print} 'You are...'
=======
                start_code: "# place your code here"
            15:
                story_text: |
                    ## Restaurant
                    With the `{while}` you can make sure your costumers can keep adding orders until they are done.

                example_code: |
                    ```
                    {print} 'Welcome at McHedy'
                    more = 'yes'
                    {while} more == 'yes'
                        order = {ask} 'What would you like to order?'
                        {print} order
                        more = {ask} 'Would you like to order anything else?'
                    {print} 'Thank you!'
                    ```
                start_code: "# place your code here"
    fortune:
        name: "Fortune teller"
        description: "Let Hedy predict the future"
        default_save_name: "Fortune Teller"
        levels:
            1:
                story_text: |
                    ## Fortune Teller
                    Have you ever been to a carnival and had your future predicted by a fortune teller? Or have you ever played with a magic eight ball?
                    Then you probably know that they can't really predict your future, but it's still fun to play!

                    In the upcoming levels you can learn how to create your own fortune telling machine!
                    In level 1 you can start off easy by letting Hedy introduce herself as a fortune teller and let her {echo} the players' answers.
                    Like this:
                example_code: |
                    ```
                    {print} Hello, I'm Hedy the fortune teller!
                    {ask} Who are you?
                    {print} Let me take a look in my crystal ball
                    {print} I see... I see...
                    {echo} Your name is
                    ```
                story_text_2: |
                    ## Challenge
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?
                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
                start_code: "# place your code here"
            3:
                story_text: |
                    ## Fortune Teller
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:
                example_code: |4

                    In this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.
                    ```
                    {print} I’m Hedy the fortune teller!
                    question {is} {ask} What do you want to know?
                    {print} This is what you want to know: question
                    answers {is} yes, no, maybe
                    {print} My crystal ball says...
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
                story_text_2: |
                    ## Challenge
                    Now, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or 'ask again'.
                start_code: "# place your code here"
            4:
                story_text: |
                    ## Fortune Teller
                    This level has no new functions, but allows you to practice with using the quotation marks.
                    You can remake your level 3 code, and make sure to add the quotation marks in the right places!

                    Mind that in level 3, we couldn't use the word 'question' as both the name of the variable and a normal word that could be printed.
                    The quotation marks in level 3 make this possible!

                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to Im or Whats.

                    ## Challenge
                    We have removed all the quotation marks from this example code, can you add them in all the right places?
                example_code: |
                    ```
                    _ Add the quotation marks to this code _
                    {print} Im Hedy the fortune teller!
                    question {is} {ask} What do you want to know?
                    {print} This is your question:  question
                    answers {is} yes, no, maybe
                    {print} My crystal ball says...
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
                start_code: "# place your code here"
            5:
                story_text: |
                    ## Fortune Teller
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'I can predict if youll win the lottery tomorrow!'
                    person {is} {ask} 'Who are you?'
                    {if} person {is} Hedy {print} 'You will definitely win!🤩' {else} {print} 'Bad luck! Someone else will win!😭'
                    ```
                story_text_2: |
                    ## Hack the program
                    Replace Hedy with your own name in the last line, and Hedy will always predict that you will win the lottery and others won't!
                    Of course this might raise some suspicion with the other players... To avoid that, you can make sure that Hedy does give different answers every time you run the code.
                    But of course, still gives you a positive answer and the other players a negative one.
                example_code_2: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'I can predict if you will win the lottery tomorrow!'
                    person {is} {ask} 'Who are you?'
                    goodanswer {is} Hurray! You win!, You will definitely win!, We have a winner!
                    badanswer {is} Bad luck! Try again!, Another person will win, You lose!
                    {if} person {is} Hedy {print} goodanswer {at} {random} {else} {print} badanswer {at} {random}
                    ```
                story_text_3: |
                    ## Challenges
                    This concept can be used to make may different programs, just be creative! For example you could create a machine that predicts that your favorite sports team will beat all the competitors!
                    Or you could make  Snow White's magic mirror on the wall, to tell everyone you are the fairest of them all!
                    Let your imagination do the work!

                start_code: "# place your code here"
            6:
                story_text: |
                    ## Fortune Teller
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.



                    ## Challenge
                    Can you think of your own (silly) fortune telling machine?

                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'I can predict how many kids youll get when you grow up!'
                    age = {ask} 'How old are you?'
                    siblings = {ask} 'How many siblings do you have?'
                    length = {ask} 'How tall are you in centimetres?'
                    kids = length / age
                    kids = kids - siblings
                    {print} 'You will get ...'
>>>>>>> Stashed changes
                    {sleep}
                    {print} 'right!'
                    {else}
                    {print} 'You are wrong!'
                    ```
<<<<<<< Updated upstream
                feedback: "You are wrong!"
            -   option: |
                    ```
                    {if} answer {is} 32
                        {print} 'You are...'
=======

                    ## Example Silly Fortune Teller
                    If the previous example wasn't silly enough for you, take a look at this one!
                    ```
                    {print} 'Im Hedy the silly fortune teller!'
                    {print} 'I will predict how smart you are!'
                    football = {ask} 'On a scale 1-10 how much do you love football?'
                    bananas = {ask} 'How many bananas did you eat this week?'
                    hygiene = {ask} 'How many times did you wash your hands today?'
                    result = bananas + hygiene
                    result = result * football
                    {print} 'You are ' result ' percent smart.'
                    ```
                start_code: "# place your code here"
            7:
                story_text: |
                    ## Fortune Teller
                    In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'You can ask 3 questions!'
                    {repeat} 3 {times} question = {ask} 'What do you want to know?'
                    answer = yes, no, maybe
                    {repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}
                    ```
                story_text_2: |
                    ## Challenge
                    As you can see, the questions aren't printed in this example. That's because the variable `question` was changed 3 times.
                    Every time the player fills in the new answer, Hedy overwrites the previous one, so the first answer the player gave is forgotten.
                    This means you can't print all the questions this way.

                    By using 3 different variables instead of 1 (for example `question_1` , `question_2` and `question_3`), you could solve the problem and print the questions.
                    This does mean that you can only use `{repeat}` for the answers, and you will have to ask and print all the questions separately.
                    Can you do it?

                    In the upcoming levels the layout of `{repeat}` command will change, which enables you to repeat multiple lines at once.
                start_code: "# place your code here"
            8:
                story_text: |
                    ## Fortune Teller
                    In the previous levels you've learned how to use `{repeat}` to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.
                    Now that problem is solved, because of the new way of using the `{repeat}` command.
                    In the next example you can have your fortune teller ask 3 questions and also print them!

                    ## Challenge
                    Can you fill in the `{repeat}` command correctly on the blanks?
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'You can ask me 3 questions.'
                    answers = yes, no, maybe
                    _ _ _
                       question = {ask} 'What do you want to know?'
                       {print} question
                       {sleep}
                       {print} 'My crystal ball says...' answers {at} {random}
                    ```
                start_code: "# place your code here"
            10:
                story_text: |
                    ## Fortune Teller
                    In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    {for} name {in} names
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
>>>>>>> Stashed changes
                        {sleep}
                        {print} 'right!'
                    {else}
                        {print} 'You are wrong!'
                    ```
<<<<<<< Updated upstream
                feedback: "You are... right!"
            -   option: |
                    ```
                    {if} answer {is} 32
                        {print} 'You are...'
                        {sleep}
                    {print} 'right!'
                    {else}
                        {print} 'You are wrong!'
                    ```
                feedback: "You are wrong!"
            correct_answer: "C"
            hint: "What should happen if the person is right? And what else?"
            question_score: '10'
        9:
            question_text: "What line(s) in this code should start with 4 spaces?"
            code: |-
                1 music = {ask} 'What is your favorite music genre?'
                2 {if} music {is} rock
                3 {print} '🤘'
                4 {else}
                5 {print} '👎'
            mp_choice_options:
            -   option: "Line 2 and 4"
                feedback: "The lines after the `{if}` and `{else}` command should start with 4 spaces"
            -   option: "Only line 3"
                feedback: "Not only 3..."
            -   option: "Line 3, 4 and 5"
                feedback: "Line 4 shouldn't"
            -   option: "Line 3 and 5"
                feedback: "Great job!"
            correct_answer: "D"
            hint: "The lines after an `{if}` or `{else}` command should start with 4 spaces."
            question_score: '10'
        10:
            question_text: "Which statement is true?"
            code: |-
                1 level = {ask} 'What level are you on?'
                2 {if} level {is} 8
                3 {print} 'Great job!'
            mp_choice_options:
            -   option: "All lines should start with 4 spaces"
                feedback: "That's not true"
            -   option: "Line 2 and 3 should start with 4 spaces"
                feedback: "That's not true"
            -   option: "Line 2 should start with 4 spaces"
                feedback: "That's not true"
            -   option: "Line 3 should start with 4 spaces"
                feedback: "You are correct!"
            correct_answer: "D"
            hint: "Only one line starts with 4 spaces, but which one...?"
            question_score: '10'
    9:
        1:
            question_text: "What is wrong with this code?"
            code: |-
                {repeat} 3 {times}
                   eten = {ask} 'What would you like to eat?'
                   {if} food {is} fries
                       sauce = {ask} 'What sauce would you like?'
                       {print} 'One fries with ' sauce
                   {if} food {is} pizza
                       topping = {ask} 'What topping would you like?'
                       {print} 'One pizza with ' topping
                {print} 'Thank you for your order'
            mp_choice_options:
            -   option: "Nothing this code is correct!"
                feedback: "That's right!."
            -   option: "You're not allowed to use an `{if}` command after an `{ask}` command."
                feedback: "You are!."
            -   option: "You don't have to use indentation twice."
                feedback: "You always have to use indentation."
            -   option: "The indentation is wrong in the last `{if}` command."
                feedback: "It not, though."
            correct_answer: "A"
            hint: "all the indentation is done correctly."
            question_score: '10'
        2:
            question_text: "What will be printed after entering the correct password?"
            code: |-
                password = {ask} 'What is the password?'
                correct_password = Hedy
                {if} password {is} correct_password
                    {repeat} 2 {times}
                        {print} 'Good job!'
                        {print} 'You can use the computer!'
                {else}
                    {print} 'The computer will explode in 5... 4... 3... 2... 1...'
            mp_choice_options:
            -   option: |-
                  ```
                  Good job!
                  Good job!
                  ```
                feedback: "That's not it!"
            -   option: |-
                  ```
                  The computer will explode in 5... 4... 3... 2... 1...
                  ```
                feedback: "That's not it!"
            -   option: |-
                  ```
                  Good job!
                  Good job!
                  You can use the computer!
                  ```
                feedback: "That's not it!"
            -   option: |-
                  ```
                  Good job!
                  You can use the computer!
                  Good job!
                  You can use the computer!
                  ```
                feedback: "Correct!"
            correct_answer: "D"
            hint: "Everything under the `{repeat}` command is repeated twice."
            question_score: '10'
        3:
            question_text: "Which case should you choose to win a million dollars?"
            code: |-
                {print} 'Choose the right case and win!'
                case = {ask} 'Which case will you pick? 1 or 2?'
                {if} case {is} 1
                     action = {ask} 'Open it or sell it?'
                         {if} action {is} sell
                             {print} 'You sell your case for 10 dollars'
                         {if} action {is} open
                             {print} 'You open the case and win an apple pie'
                {if} case {is} 2
                     action = {ask} 'Open it or sell it?'
                         {if} action {is} sell
                             {print} 'You sell the case for 500 dollars'
                         {if} action {is} open
                             {print} 'You open the case and win a million dollars!'
            mp_choice_options:
            -   option: "case 1, sell"
                feedback: "You don't win a million!"
            -   option: "case 1, open"
                feedback: "You don't win a million"
            -   option: "case 2, sell"
                feedback: "You don't win a million"
            -   option: "case 2, open"
                feedback: "Great job! You win!"
            correct_answer: "D"
            hint: "Follow the right path"
            question_score: '10'
        4:
            question_text: "Which statement is true?"
            code: |-
                name = {ask} 'What is your name?'
                size = {ask} 'What is your shoe size?'
                {if} size {is} 38
                    {if} name {is} Cinderella
                        {print} 'I was looking for you!'
                    {else}
                        {print} 'You are not the one!'
                {else}
                    {print} 'Ill keep looking'
            mp_choice_options:
            -   option: "Sleeping Beauty with shoe size 38 gets the output 'Ill keep looking'"
                feedback: "No, she gets 'You are not the one!'"
            -   option: "Cinderella with shoe size 40 gets the output: 'I was looking for you!'"
                feedback: "No, she gets 'Ill keep looking'"
            -   option: "Sleeping Beauty with shoe size 40 gets the output 'Ill keep looking'"
                feedback: "That's right!"
            -   option: "Cinderella with shoe size 40 gets the output 'I was looking for you!'"
                feedback: "No she gets 'Ill keep looking'"
            correct_answer: "C"
            hint: "No matter what your name is, if you have shoe size 40 you will get the message 'Ill keep looking'."
            question_score: '10'
        5:
            question_text: "Which code produced this output?"
            output: |-
                Icecream is the best!
                Icecream is the best!
                Icecream is the best!
            mp_choice_options:
            -   option: |
                    ```
                    desert = {ask} 'What is your favorite type of desert?'
                    {if} desert {is} icecream
                        {repeat} 3 {times}
                        {print} 'Icecream is the best!'
                    ```
                feedback: "Don't forget the indentation after `{repeat}` commands."
            -   option: |
                    ```
                    desert = {ask} 'What is your favorite type of desert?'
                    {if} desert {is} icecream
                    {repeat} 3 {times}
                        {print} 'Icecream is the best!'
                    ```
                feedback: "Use indentation after an `{if}` command"
            -   option: |
                    ```
                    desert = {ask} 'What is your favorite type of desert?'
                    {if} desert {is} icecream
                        {repeat} 3 {times}
                            {print} 'Icecream is the best!'
                    ```
                feedback: "Perfect"
            -   option: |
=======
                story_text_2: |
                    ## Challenge
                    We can also make a Harry Potter themed fortune teller. Fill in the correct line of code in line 5 and add the correct indentation to line 6 - 8 and this program will act like the sorting hat!
                example_code_2: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
                start_code: "# place your code here"
            12:
                story_text: |
                    ## Fortune Teller
                    In this level you can make your fortunes multiple words. Can you add more different fortunes to the list?
                example_code: |
                    ```
                    fortunes = 'you will slip on a banana peel', _
                    {print} 'I will take a look in my crystall ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
                start_code: "# place your code here"
    haunted:
        name: "Haunted House"
        description: "Escape from the haunted house"
        default_save_name: "Haunted House"
        levels:
            1:
                story_text: |
                    ## Haunted house
                    In this adventure you are working towards making a game in which you have to escape from a haunted house by picking the correct door.
                    If you pick the right door you'll survive, but if not a terrible monster might...

                    In level 1 we start our haunted house game by making up a scary story and ask the player what monster they'll see in the haunted house.
                example_code: |
                    ```
                    {print} How did I get here?
                    {print} I remember my friend telling me to go into the old mansion...
                    {print} and suddenly everything went black.
                    {print} But how did I end up on the floor...?
                    {print} My head hurts like Ive been hit by a baseball bat!
                    {print} What's that sound?
                    {print} Oh no! I feel like Im not alone in this house!
                    {print} I need to get out of here!
                    {print} There are 3 doors in front of me..
                    {ask} Which door should i pick?
                    {echo} I choose door
                    {print} ...?
                    ```
                story_text_2: |
                    ## Challenge
                    Can you finish the scary story? Or make up your own haunted house story?
                start_code: "{print} How did I get here?"
            2:
                story_text: |
                    ## Haunted House
                    In this haunted house you can choose your monsters with emojis. Of course you could also use words.
                example_code: |
                    ```
                    monster_1 {is} 👻
                    monster_2 {is} 🤡
                    monster_3 {is} 👶
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                story_text_2: |
                    ## Challenge
                    In the example above the monsters are predetermined. So each time you run your code, the output is the same.
                    Can you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                start_code: "monster1 {is} _"
            3:
                story_text: |
                    ## Haunted house game
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!
                example_code: |
                    ```
                    {print} Escape from the haunted house!
                    {print} There are 3 doors in front of you...
                    choice {is} {ask} Which door do you choose?
                    {print} You picked door ... choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} You see...
                    {sleep}
                    {print} monsters {at} {random}
                    ```
                story_text_2: |
                    ## Challenge
                    This story is pretty straight forward, maybe you can spook it up a bit by adding a more exciting story.
                    Also you have very limited outcomes right now, there are only 3 options of what's behind the doors. Maybe you can think of more monsters to add to the list!
                story_text_3: |
                    ## Change the game into a tv gameshow!
                    Lastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!
                    Can you do it?
                example_code_3: |
                    ```
                    {print} The big gameshow!
                    {print} There are 3 suitcases in front of you...
                    {print} One of them contains _
                    _
                    ```
                start_code: "# place your code here"
            4:
                story_text: |
                    ## Haunted house
                    In this level you learn how to use quotation marks in your games.
                    Can you make your Haunted House level 4 proof?
                example_code: |
                    ```
                    {print} _ Escape from the haunted house! _
                    {print} _ There are 3 doors in front of you... _
                    choice {is} {ask} _ Which door do you choose? _
                    {print} _ You picked door ... _ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _ You see... _
                    {sleep}
                    {print} monsters {at} {random}
                     ```

                start_code: "# place your code here"
            5:
                story_text: |
                    ## Haunted House
                    Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.
                    If the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).
                    In this level you can only win the game by picking the same door Hedy picked randomly.

                    ## Challenge
                    Can you find the 4 missing words to complete the code?
                example_code: |
                    ```
                    {print} 'Escape from the haunted house!'
                    {print} 'There are 3 doors in front of you...'
                    doors {is} 1, 2, 3
                    monsters {is} werewolf, mummy, vampire, zombie
                    chosen_door {is} {ask} 'Which door do you choose?'
                    {print} 'You chose door...' chosen_door
                    {sleep}
                    correct_door {is} doors {at} {random}
                    _ _ _ _ {print} 'Great! Youve escaped!'
                    {else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}
>>>>>>> Stashed changes
                    ```
                    {repeat} 3 {times}
<<<<<<< Updated upstream
                        desert = {ask} 'What is your favorite type of desert?'
                        {if} desert {is} icecream
                            {repeat} 3 {times}
                            {print} 'Icecream is the best!'
                    ```
                feedback: "There are 2 `{repeat}` commands in this code."
            correct_answer: "C"
            hint: "Watch the indentation"
            question_score: '10'
        6:
            question_text: "After which command(s) should you use indentation (starting the next line with 4 spaces)?"
            mp_choice_options:
            -   option: "`{if}`"
                feedback: "Don't forget the others"
            -   option: "`{if}` `{repeat}`"
                feedback: "Don't forget `{else}`!"
            -   option: "`{if}` `{else}` `{repeat}`"
                feedback: "Keep it up!"
            -   option: "`{if}` `{else}` `{repeat}` `{print}`"
                feedback: "Not with print"
            correct_answer: "C"
            hint: "Indentation happens on the line below some commands"
            question_score: '10'
        7:
            question_text: "In this code from a pizza restaurant. \nYou'll get a 5 dollar discount if you order a medium pizza with coke.\n What should you do to debug this code?"
            code: |-
                {if} food {is} pizza
                {if} size {is} medium
                {if} drink {is} coke
                price = price - 2
            mp_choice_options:
            -   option: |
                    ```
                    {if} food {is} pizza
                        {if} size {is} medium
                            {if} drink {is} coke
                                price = price - 2
                    ```
                feedback: "Amazing!"
            -   option: |
                    ```
                    {if} food {is} pizza
                        {if} size {is} medium
                    {if} drink {is} coke
                        price = price - 2
                    ```
                feedback: "Try again!"
            -   option: |
                    ```
                    {if} food {is} pizza
                    {if} size {is} medium
                    {if} drink {is} coke
                            price = price - 2
                    ```
                feedback: "Try again"
            -   option: |
                    ```
                    {if} food {is} pizza
                        {if} size {is} medium
                            {if} drink {is} coke
                            price = price - 2
                    ```
                feedback: "Try again"
            correct_answer: "A"
            hint: "After each `{if}` command, the line below should indent"
            question_score: '10'
        8:
            question_text: "What is wrong is this code?"
            code: |-
                age = {ask} 'Happy Birthday! How old are you?'
                singing = {ask} 'Would you like us to sing?'
                    if singing {is} yes
                        {repeat} years {times}
                          {print} 'Hip Hip Hooray'
            mp_choice_options:
            -   option: "You can't put two questions in a row"
                feedback: "Yes you can."
            -   option: "The variable called 'age' is later on used as 'years'"
                feedback: "Keen eye! Good job!"
            -   option: "You're not allowed to start with 8 spaces, like line 4 and 5 do"
                feedback: "You actually must start like that."
            -   option: "A code must always start with a `{print}` command in the first line"
                feedback: "That's not true."
            correct_answer: "B"
            hint: "The indentation is done right this time"
            question_score: '10'
        9:
            question_text: "How many `{if}` commands can be placed inside another `{if}` command?"
            mp_choice_options:
            -   option: "None, that is not allowed"
                feedback: "You are allowed to"
            -   option: "Only 1"
                feedback: "You could use more if you like"
            -   option: "3"
                feedback: "You could use more if you like"
            -   option: "Infinite, as long as you keep using indentation correctly"
                feedback: "That is true"
            correct_answer: "D"
            hint: "You can put an `{if}` command inside an `{if}` command."
            question_score: '10'
        10:
            question_text: "Which statement is true?"
            code: |-
                1 {repeat} 2 {times}
                2 {if} level {is} 9
                3 {print} Great job!
            mp_choice_options:
            -   option: "All lines should start with 4 spaces"
                feedback: "Only line 2 and 3 start with spaces"
            -   option: "Line 2 and 3 should start with 4 spaces"
                feedback: "Line 3 should start with 8"
            -   option: "Line 2 and 3 should start with 8 spaces"
                feedback: "Line 2 should start with 4"
            -   option: "line 2 should start with 4 spaces and line 3 with 8"
                feedback: "You are correct!"
            correct_answer: "D"
            hint: "The first line doens't start with any spaces"
            question_score: '10'
    11:
        1: question_text: "Which text produces the right output?"
           code: |-
                10
                9
                8
                7
                6
                5
                4
                3
                2
                1
                Happy New Years!
            mp_choice_options:
            -   option: |
                    ```
                    {for} i {in} {range} 10 {to} 1
                        {print} i
                    {print} "Happy New Years!"
                    ```
                feedback: "Correct!"
                
            -   option: |
                    ```
                    {for} i 10 {to} 1
                        {print} i
                    (print) "Happy New Years!"
                    ```
                feedback: "We want to make sure we have the correct syntax for a loop!"
            -   option: |
                    ```
                    {for} i {in} {range} 1 {to} 10
                        {print} i
                    {print} "Happy New Years!"
                    ```
                feedback: "We want to make sure we count down instead of up!"
            - option: |
                    ```
                    {for} i {in} {range} 10 {to} 1
                        {print} i
                        {print} "Happy New Years!"
                        {print} i
                    ```
              feedback: "Here, 'Happy New Years' is printed 10 times and i is printed multiple times!"
            
                
        2:
            question_text: "What word should be at the place of the question mark?"
            code: |-
                {for} i {in} _?_ 1 {to} 10
                    {print} i
            mp_choice_options:
            -   option: |
                    ```
                    counter
                    ```
                feedback: "No"
            -   option: |
                    ```
                    {range}
                    ```
                feedback: "Correct"
            -   option: |
                    ```
                    {if}
                    ```
                feedback: "No"
            -   option: |
                    ```
                    {for}
                    ```
                feedback: "No"
            correct_answer: "B"
            hint: "What did you learn in this level?"
            question_score: '10'
        3:
            question_text: "What will be the output from this code?"
            code: |-
                {for} i {in} {range} 1 {to} 3
                    {print} i
            mp_choice_options:
            -   option: "1\n2\n3"
                feedback: "Correct!"
            -   option: "1 2 3"
                feedback: "That's not it"
            -   option: "1, 2, 3"
                feedback: "That's not it"
            -   option: "123"
                feedback: "That's not it"
            correct_answer: "A"
            hint: "How do the numbers appear in the screen?"
            question_score: '10'
        4:
            question_text: "Which code was used to get this output?"
            output: |-
                1
                2
                3
                4
                5
                Once I caught a fish alive!
            mp_choice_options:
            -   option: |
                    ```
                    {for} i {in} {range} 1 {to} 5
                        {print} i
                    {print} 'Once I caught a fish alive!'
                    ```
                feedback: "Perfect"
            -   option: |
                    ```
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                    {print} 'Once I caught a fish alive!'
                    ```
                feedback: "This code won't work. You need an indent after {for}."
            -   option: |
                    ```
                    {for} i {in} {range} 1 {to} 5
                        {print} i
                        {print} 'Once I caught a fish alive!'
                    ```
                feedback: "Now Hedy will count '1 Once I caught a fish alive!, 2 Once I caught a fish alive! etc."
            -   option: |
                    ```
                    {for} i {in} {range} 1 {to} 5
                        {print} 'i'
                    {print} 'Once I caught a fish alive!'
                    ```
                feedback: "i is a variable and shouldn't have quotation marks"
            correct_answer: "A"
            hint: "First all the numbers, then the sentence"
            question_score: '10'
        5:
            question_text: "Which code was used to get this output?"
            output: |-
                10
                9
                8
                7
                6
                5
                4
                3
                2
                1
                0
            mp_choice_options:
            -   option: |
                    ```
                    {for} i {in} {range} 0 {to} 10
                        {print} i
                    ```
                feedback: "Now Hedy prints the numbers from 0 to 10 instead of 10 to 0."
            -   option: |
                    ```
                    {for} i {in} {range} 0 to 10
                        {print} - i
                    ```
                feedback: "Hedy would print negative numbers in this case."
            -   option: |
                    ```
                    {for} i {in} {range} 10 to 0
                        {print} 10 9 8 7 6 5 4 3 2 1 0
                    ```
                feedback: "Unfortunately this does not exist."
            -   option: |
                    ```
                    {for} i {in} {range} 0 {to} 10
                        {print} 10 - i
                    ```
                feedback: "That's right!"
            correct_answer: "D"
            hint: "It has to be a calculation..."
            question_score: '10'
        6:
            question_text: "What's wrong with this code?"
            code: |-
                {for} i {in} {range} 1 {to} 10
                {print} i
            mp_choice_options:
            -   option: "The i in the last line need quotation marks"
                feedback: "No it doesn't."
            -   option: "You can't use `{range}` 1 `{to}` 5 only `{range}` 1 `{to}` 10"
                feedback: "You could use 1 to 5 just as well!"
            -   option: "Line 1 needs to start with an indention."
                feedback: "Not line 1..."
            -   option: "Line 2 needs to start with an indention"
                feedback: "Perfect!"
            correct_answer: "D"
            hint: "There is something wrong with the indention"
            question_score: '10'
        7:
            question_text: "How many times does the word Hello appear on your screen when you run the code?"
            code: |-
                {for} i {in} {range} 0 {to} 2
                    {print} 'Hello'
            mp_choice_options:
            -   option: "1 time"
                feedback: "No"
            -   option: "2 times"
                feedback: "No"
            -   option: "3 times"
                feedback: "That's right!"
            -   option: "Never"
                feedback: "No"
            correct_answer: "C"
            hint: "0 also counts. So 0,1,2 that's 3 times."
            question_score: '10'
        8:
            question_text: "What should be on the place of the question mark?"
            code: |-
                {print} 'Welcome to Hedys diner'
                people is {ask} 'How many people will be eating here tonight?'
                _?_
                    food is {ask} 'What would you like to order?'
                    {print} food
            mp_choice_options:
            -   option: |
                    ```
                    {for} i {in} {range} 0 {to} 3
                    ```
                feedback: "There's not always 3 people"
            -   option: |
                    ```
                    {for} i {in} {range} 1 {to} guests
                    ```
                feedback: "The variable is not named guests"
            -   option: |
                    ```
                    {for} i {in} {range} 1 {to} people
                    ```
                feedback: "Great!"
            -   option: |
                    ```
                    {for} i {in} {range} 0 {to} people
                    ```
                feedback: "That's one order too many!"
            correct_answer: "C"
            hint: "Use the variable 'people'"
            question_score: '10'
        9:
            question_text: "What will be the output from this code?"
            code: |-
                {for} i {in} {range} 23 {to} 25
                    {print} 'hi'
            mp_choice_options:
            -   option: "23\n24\n25"
                feedback: "The numbers don't appear. It doesn't say `{print}` i."
            -   option: "23 hi 24 hi 25 hi"
                feedback: "The numbers don't appear. It doesn't say `{print}` i"
            -   option: "hi\nhi\nhi"
                feedback: "Correct"
            -   option: "The word 'hi' will appear 25 times in a row."
                feedback: "No it will only appear 3 times."
            correct_answer: "C"
            hint: "It doesn't say `{print}` i"
            question_score: '10'
        10:
            question_text: "How many times does Hedy chant Hip Hip Hooray?"
            code: |-
                age = {ask} 'How old are you?'
                {for} i {in} {range} 1 {to} age
                    {print} 'Hip Hip Hoorray!'
            mp_choice_options:
            -   option: "1 time"
                feedback: "Try again"
            -   option: "2 times"
                feedback: "Try again"
            -   option: "Never"
                feedback: "Try again"
            -   option: "That depends on how old you are"
                feedback: "That's right!"
            correct_answer: "D"
            hint: "`{for}` i `{in}` `{range}` 1 `{to}` age"
            question_score: '10'
        11:
            question_text: "Which code belongs to this output?"
            output: |-
                Baby shark tututudutudu
                Baby shark tututudutudu
                Baby shark tututudutudu
                Baby shark
            mp_choice_options:
            -   option: |
=======
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: "{print} 'Escape from the haunted house!'"
            11:
                story_text: |
                    ## Haunted House
                    In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.

                    ## Challenge
                    Finish the program with the correct line of code. Mind: There are 3 rooms that the player needs to survive before they win!
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player {is} alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    _
                        {if} player {is} alive
                            correct_door = doors {at} {random}
                            {print} 'Room ' i
                            {print} 'There are 3 doors in front of you...'
                            chosendoor = {ask} 'Which door do you choose?'
                            {if} chosendoor {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: "{print} 'Escape from the haunted house!'"
            14:
                story_text: |
                    ## Haunted House
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives > 0
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = lives -1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: "# place your code here"
            16:
                story_text: |
                    ## Haunted House Game
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts etaing it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' hint[i]
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' monsters[i]
                    needed_weapon = weapons[i]
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} good_fate[i]
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} bad_fate[i]
                        {print} 'GAME OVER'
                    ```
                start_code: "# place your code here"
    piggybank:
        name: "Piggy Bank"
        description: "Count your pocketmoney!"
        default_save_name: "Piggy Bank"
        levels:
            12:
                story_text: |
                    ## Piggy Bank
                    In this adventure you learn how to make a digital piggy bank.
                    Finish the code to calculate how much money you have and how long you need to save up to buy what you want!
                example_code: |
                    ```
                    {print} 'The digital piggy bank'
                    wish = {ask} 'What would you like to buy?'
                    price = {ask} 'How much does that cost?'
                    saved = {ask} 'How much money have you saved already?'
                    allowance = {ask} 'How much pocket money do you get per week?'
                    to_save = price - saved
                    weeks = to_save / allowance
                    {print} 'You can buy a ' _ ' in ' _ ' weeks.'
                    ```
                start_code: "# place your code here"
            14:
                story_text: |
                    ## Piggybank
                    In this level you can let Hedy tell you if you have saved up enough money!
                example_code: |
                    ```
                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'
                    to_save = wish - money
                    weeks = to_save / allowance
                    {if} wish > money
                        {print} 'You need to save up some more!'
                        {print} 'Youll need ' weeks ' more weeks.'
                    {else}
                        {print} 'Great! You have enough'
                        {print} 'Lets go shopping!'
                    ```
                start_code: "# place your code here"
    quizmaster:
        name: "Quizmaster"
        description: "Make your own quiz!"
        default_save_name: "Quizmaster"
        levels:
            14:
                story_text: |
                    ## Make your own quiz
                    In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!
                    You can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!
                example_code: |
                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                        {print} 'You belong to the A club'
                    {if} points_b > points_a
                        {print} 'You belong to the B club'
                    ```
                start_code: "# place your code here"
    language:
        name: "Language"
        description: "Practice words in a foreign language"
        default_save_name: "Language"
        levels:
            5:
                story_text: |
                    ## Learn a new language
                    Make your own program to practice your vocabulary in a new language.

                    ## Challenge
                    Can you make this program for a different language? Or can you add more words to the French one?
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} '🐱'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} '🐸'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
                start_code: "# place your code here"
            16:
                story_text: |
                    ## Learn a new language
                    Make your own program to practice your vocabulary in a new language.

                example_code: |
>>>>>>> Stashed changes
                    ```
                    {for} i {in} {range} 1 {to} 3
<<<<<<< Updated upstream
                        {print} Baby shark tututudutudu
                        {print} Baby shark
                    ```
                feedback: "Mind the indention"
            -   option: |
=======
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
                start_code: "# place your code here"
    secret:
        name: "SuperSpy"
        description: "Make your own spy code"
        default_save_name: "SuperSpy"
        levels:
            12:
                story_text: |
                    ## Make a secret code like a super spy
                    In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.
                    If the enemy tries to crack the code, they will get some false info to waste their time.

                    ## Challenge
                    Make your own secret code for your superspy. Can you make it consist of even more variables?
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    if name {is} 'Agent007'
                        a {is} 'Go to the airport '
                    {else}
                        a {is} 'Go to the trainstation '
                    password {is} {ask} 'What is the password?'
                    {if} password {is} 'TOPSECRET'
                        b {is} 'tomorrow at 02.00'
                    {else}
                        b {is} 'today at 10.00'
                    {print} a + b
                    ```
                start_code: "## place your code here"
            13:
                story_text: |
                    ## Superspy
                    Can you fill in the right command on the blank? Mind: The superspy has to answer BOTH questions correctly, before they get the confidential information!
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    password {is} {ask} 'What is your password?'
                    {if} name {is} 'Agent007' _ password {is} 'TOPSECRET'
                        {print} 'Go to the airport at 02.00'
                    {else}
                        {print} 'Go to the trainstation at 10.00'
                     ```
                start_code: "## place your code here"
    blackjack:
        name: "Blackjack"
        description: "Try to get as close to 21 as you can"
        default_save_name: "Blackjack"
        levels:
            17:
                story_text: |
                    ## Create a game of Blackjack
                    Blackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.
                    The Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.
                    If you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.
                    But be careful not to get more than 21 points, because if you do, you lose!
                    The player who gets closest to 21, without going over it, wins!

                    Have fun!
                example_code: |
                    ```
                    {print} 'BLACKJACK'
                    cards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']
                    points = 0
                    dealer_points = 0
                    card_1 = cards[{random}]
                    card_2 = cards[{random}]
                    card_3 = cards [{random}]
                    dealer_card_1 = cards[{random}]
                    dealer_card_2 = cards[{random}]
                    dealer_card_3 = cards[{random}]
                    # Points for card 1
                    {if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':
                        points = points + 10
                    {elif} card_1 == 'Ace':
                        points = points + 11
                    {else}:
                        points = points + card_1
                    # Points for card 2
                    {if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':
                        points = points + 10
                    {elif} card_2 == 'Ace':
                        points = points + 11
                    {else}:
                        points = points + card_2
                    # Points for dealer card 1
                    {if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':
                        dealer_points = dealer_points + 10
                    {elif} dealer_card_1 == 'Ace':
                        dealer_points = dealer_points + 11
                    {else}:
                        dealer_points = dealer_points + dealer_card_1
                    # Points for dealer card 2
                    {if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':
                        dealer_points = dealer_points + 10
                    {elif} dealer_card_2 == 'Ace':
                        dealer_points = dealer_points + 11
                    {else}:
                        dealer_points = dealer_points + dealer_card_2
                    # Two Aces
                    {if} card_1 == 'Ace' {and} card_2 == 'Ace':
                        points = 12
                    {if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':
                        dealer_points = 12
                    # Scoreboard
                    {print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'
                    {print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'
                    # Extra card for the player
                    hit = {ask} 'Do you want an extra card?'
                    {if} hit == 'yes':
                        {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':
                            points = points + 10
                        {elif} card_3 == 'Ace':
                            {if} points > 11:
                                points = points + 11
                            {else}:
                                points = points + 1
                        {else}:
                            points = points + card_3
                        print 'You get an extra ' card_3 ' (' points ' points)'
                    {else}:
                        print 'No extra cards'
                    # Winner
                    {if} points > 21 {or} dealer_points > points {or} dealer_points == 21:
                        {print} 'You lose'
                    {elif} dealer_points < 17:
                        {print} 'The dealer takes an extra card. It is a... ' dealer_card_3
                        {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':
                            dealer_points = dealer_points + 10
                        {elif} dealer_card_3 == 'Ace':
                            {if} dealer_points < 11:
                                dealer_points = dealer_points + 11
                            {else}:
                                dealer_points = dealer_points + 1
                        {else}:
                            dealer_points = dealer_points + dealer_card_3
                        {print} 'The dealer has ' dealer_points ' points now'
                        {if} dealer_points < 21 {and} dealer_points > points:
                            {print} 'You lose'
                        {else}:
                            {print} 'You win'
                    {elif} points > dealer_points {and} points < 21:
                        {print} 'You win!'
                    ```
                start_code: "# place your code here"
    tic:
        name: "Tic Tac Toe"
        description: "Play a game of Tic Tac Toe!"
        default_save_name: "Tic"
        levels:
            13:
                story_text: |
                    ## Tic Tac Toe
                    In this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.
                    The first player that gets 3 in a row (horizontally, vertically or diagonally) wins!
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game {is} 'on'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice {is} 1
                                    spot_1 = sign
                                {if} choice {is} 2
                                    spot_2 = sign
                                {if} choice {is} 3
                                    spot_3 = sign
                                {if} choice {is} 4
                                    spot_4 = sign
                                {if} choice {is} 5
                                    spot_5 = sign
                                {if} choice {is} 6
                                    spot_6 = sign
                                {if} choice {is} 7
                                    spot_7 = sign
                                {if} choice {is} 8
                                    spot_8 = sign
                                {if} choice {is} 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner {is} 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign {is} 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: "## place your code here"
            14:
                story_text: |
                    ## Tic Tac Toe
                    In the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.
                    You can use this knowledge in your new Tic Tac Toe game, like this:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game != 'over'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice == 1
                                    spot_1 = sign
                                {if} choice == 2
                                    spot_2 = sign
                                {if} choice == 3
                                    spot_3 = sign
                                {if} choice == 4
                                    spot_4 = sign
                                {if} choice == 5
                                    spot_5 = sign
                                {if} choice == 6
                                    spot_6 = sign
                                {if} choice == 7
                                    spot_7 = sign
                                {if} choice == 8
                                    spot_8 = sign
                                {if} choice == 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner == 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign == 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: "## place your code here"
            15:
                story_text: |
                    ## Tic Tac Toe
                    In this level you can improve your Tic Tac Toe game with the {while} loop. With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 {to} 9` into one simple line.
                    Check it out:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over'
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots
                            {remove} choice {from} open_spots
                            {if} choice == 1
                                spot_1 = sign
                            {if} choice == 2
                                spot_2 = sign
                            {if} choice == 3
                                spot_3 = sign
                            {if} choice == 4
                                spot_4 = sign
                            {if} choice == 5
                                spot_5 = sign
                            {if} choice == 6
                                spot_6 = sign
                            {if} choice == 7
                                spot_7 = sign
                            {if} choice == 8
                                spot_8 = sign
                            {if} choice == 9
                                spot_9 = sign
                        {else}
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        winner = {ask} 'Did you win?'
                        {if} winner == 'yes'
                            {print} 'Good job, player ' sign '!'
                            game = 'over'
                        {else}
                            {if} sign == 'x'
                                sign = 'o'
                            {else}
                                sign = 'x'
                    ```
                start_code: "## place your code here"
            17:
                story_text: |
                    ## Tic Tac Toe
                    In the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.
                    This made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.
                    To use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.

                    In the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).
                    You can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.
                    This means that the {while} loop will be stopped and the game ends.

                example_code: |
                    ```
                    sign = 'x'
                    open_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over':
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots:
                            {remove} choice {from} open_spots
                            {if} choice == 1:
                                spot_1 = sign
                            {if} choice == 2:
                                spot_2 = sign
                            {if} choice == 3:
                                spot_3 = sign
                            {if} choice == 4:
                                spot_4 = sign
                            {if} choice == 5:
                                spot_5 = sign
                            {if} choice == 6:
                                spot_6 = sign
                            {if} choice == 7:
                                spot_7 = sign
                            {if} choice == 8:
                                spot_8 = sign
                            {if} choice == 9:
                                spot_9 = sign
                        {else}:
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {else}:
                            {if} sign == 'x':
                                sign = 'o'
                            {else}:
                                sign = 'x'
                    ```

                start_code: "## place your code here"
    next:
        name: "What's next?"
        description: "What's Next?"
        default_save_name: "Next"
        levels:
            1:
                story_text: |
                    ## What's next?
                    Congratulations! You've reached the end of level 1. Hopefully you've already made some awesome codes, but Hedy has a lot more to discover. 

                    In the first level you might've notice that the `{echo}` command can only save one bit of information at a time. 
                    For example in the restaurant adventure, you could echo what the costumer wanted to eat, or what they wanted to drink, but not both in one sentence.
                example_code: |
                    ```
                    {print} Welcome at Hedy's
                    {ask} What would you like to eat?
                    {echo} So you want 
                    {ask} what would you like to drink?
                    {echo} So you want 
                    ```
                story_text_2: |
                    If the player types a hamburger and coke, you can't say "so you would like a hamburger and coke", but you have to make two separate line. 
                    Also, the `{echo}` command only echoes the word at the end of the sentence. So you can't say "your hamburger is coming right up!".

                    That changes in level 2. In level 2 you'll learn to work with variables, that allow you to save multiple pieces of information and print them in any place you want.
                    So let's go to the next level!

                start_code: "{print} Let's go!"
            2:
                story_text: |
                    ## What's next?
                    In this level you've learned what a variable is and how you can use it to make your adventures more interactive.
                    But... that's not the only thing you can do with variables! You can also use variables to make lists.
                    And you can even let Hedy pick a random word out of a list, which allows you to make real games!
                    Take a quick look at the next level!
                start_code: "{print} Let's go to the next level!"
            3:
                story_text: |
                    ## What's next?
                    In this level you've been practising with variables, but maybe you've come across this mistake.

                    Try to run this code:
>>>>>>> Stashed changes
                    ```
                    {for} i {in} {range} 1 {to} 3
                        {print} Baby shark tututudutudu
                    {print} Baby shark
                    ```
                feedback: "That's right!"
            -   option: |
                    ```
                    {for} i {in} {range} 0 {to} 3
                        {print} Baby shark tututudutudu
                    {print} Baby shark
                    ```
                feedback: "`{range}` 0 `{to}` 3 is 4 times."
            -   option: |
                    ```
                    {for} i {in} {range} 0 {to} 3
                        {print} Baby shark tututudutudu
                        {print} Baby shark
                    ```
                feedback: "`{range}` 0 `{to}` 3 is 4 times."
            correct_answer: "B"
            hint: "Mind the indention"
            question_score: '10'
    10:
        1:
            question_text: "What do we need to fill in on the `_?_` if we want to print each compliment?"
            code: |-
                compliments = perfect, great job, amazing
                _?_
                    {print} compliment
            mp_choice_options:
            -   option: |
                    ```
                    {for} each compliment
                    ```
                feedback: "That's not it"
            -   option: |
                    ```
                    {for} compliment {in} compliments
                    ```
                feedback: "You deserve all those compliments!"
            -   option: |
                    ```
                    {if} compliment {in} compliments
                    ```
                feedback: "That's not it"
            -   option: |
                    ```
                    {for} compliments {in} compliment
                    ```
                feedback: "Almost there!"
            correct_answer: "B"
            hint: "`{for}` each compliment in the lists of compliments..."
            question_score: '10'
        2:
            question_text: "Which output is correct?"
            code: |-
                meals = pizza, pasta, pancakes
                {for} meal {in} meals
                    {print} 'I love ' meal
            mp_choice_options:
            -   option: "I love pizza"
                feedback: "Line 2 says `{for}` each meal in the list of meals. So each meal is printed."
            -   option: "I love pasta"
                feedback: "Line 2 says `{for}` each meal in the list of meals. So each meal is printed."
            -   option: "I love pancakes"
                feedback: "Line 2 says `{for}` each meal in the list of meals. So each meal is printed."
            -   option: |-
                    I love pizza
                    I love pasta
                    I love pancakes
                feedback: "Great!"
            correct_answer: "D"
            hint: "Line 2 says for each meal in the list of meals. So each meal is printed."
            question_score: '10'
        3:
            question_text: "Which output is correct?"
            code: |-
                animals = dogs, cats, hamsters, chickens
                {for} animal {in} animals
                    {print} animal ' are lovely pets'
            mp_choice_options:
            -   option: "dogs are lovely pets"
                feedback: "Line 2 says {for} each animal in the list of animals. So each animal is {print}ed."
            -   option: "dogs, cats, hamsters, chickens are lovely pets"
                feedback: "Each animal gets their own line in the output."
            -   option: |-
                    dogs are lovely pets
                    cats are lovely pets
                    hamsters are lovely pets
                    chickens are lovely pets
                feedback: "Great!"
            -   option: "You don't know yet. Because it chooses one of the animals {at} {random}."
                feedback: "Line 2 says {for} each animal in the list of animals. So each animal is {print}ed."
            correct_answer: "C"
            hint: "Line 2 says {for} each animal in the list of animals. So each animal is printed"
            question_score: '10'
        4:
            question_text: "What's wrong with this code?"
            code: |-
                groceries = apples, bread, milk
                {for} item {in} groceries
                    {print} 'We need ' groceries
            mp_choice_options:
            -   option: "Line 2 needs to start with 4 spaces as indentation"
                feedback: "No it doesn't. Only line 3 needs indentation, which it has."
            -   option: "Line 3 does not need to start with 4 spaces as indentation"
                feedback: "Line 2 is a `{for}`command so line 3 does need to start with an indent."
            -   option: "Line 3 should say item instead of groceries"
                feedback: "Good job!"
            -   option: "Line 2 should say groceries instead of item"
                feedback: "No it does not."
            correct_answer: "C"
            hint: "Line 2 says `{for}` each item in the list of groceries"
            question_score: '10'
        5:
            question_text: "What word should be on the _?_ with these digital dice?"
            code: |-
                {print} 'Welcome to the digital dice!'
                players = Ann, John, Jesse
                choices = 1, 2, 3, 4, 5, 6
                {for} player {in} players
                    {print} player ' throws ' _?_ {at} {random}
            mp_choice_options:
            -   option: "players"
                feedback: "It would say 'Ann throws Jesse', instead of 'Ann throws 6'."
            -   option: "choices"
                feedback: "That's right!"
            -   option: "choice"
                feedback: "You are very close. But you need Hedy to pick from the list called 'choices' not 'choice'..."
            -   option: "dice"
                feedback: "Look at the names of the variables."
            correct_answer: "B"
            hint: "Hedy needs to pick a number `{at} {random}`"
            question_score: '10'
        6:
            question_text: "Which of the answers below is a possible outcome when you run the code?"
            code: |-
                choices = rock, paper, scissors
                players = Kelly, Meredith
                {for} player {in} players
                    {print} player ' chooses ' choices {at} {random}
            mp_choice_options:
            -   option: |-
                    Kelly chooses rock
                feedback: "Meredith wants to play too!"
            -   option: |-
                    Meredith chooses scissors
                    Kelly chooses rock
                feedback: "So close! But Kelly is first in the list, so she goes first"
            -   option: |-
                    Meredith chooses paper
                feedback: "Kelly wants to play too!"
            -   option: |-
                    Kelly chooses paper
                    Meredith chooses scissors
                feedback: "Amazing!"
            correct_answer: "D"
            hint: "Each player will pick an option. The player that's first on the list will go first."
            question_score: '10'
        7:
            question_text: "What line should be on the _?_ in this code that decides what these people will have for dinner?"
            code: |-
                names = Ron, Leslie, April, Andy
                food = pasta, fries, salad
                _?_
                    {print} name ' has to eat ' food {at} {random} ' for dinner'
            mp_choice_options:
            -   option: |
                    ```
                    {for} name {in} names
                    ```
                feedback: "You are on fire!"
            -   option: |
                    ```
<<<<<<< Updated upstream
                    {for} names {in} name
=======
                start_code: "{print} 'Lets go to the next level!'"
            5:
                story_text: |
                    ## What's next?
                    Now you've reached the end of this level, so you have learned `{ask}` and `{if}`. For example you can ask guests what they would like to eat.
                    What you can't yet do though, is calculate the price for everyone's dinner.

                    The next level makes it possible to use addition, subtraction and multiplication in your programs. This way you can calculate the prices in your restaurant, but you could also add a secret code to give your friends and family a discount.
                    Another option in the next level is programming your own maths game, for your little brother or sister to practice their multiplications.
                    Go see for yourself in the next level!
                example_code: |
                    ## Free drinks!
                    ```
                    {print} 'Welcome at McHedy'
                    order {is} {ask} 'What would you like to eat?'
                    {print} 'You would like ' order
                    {if} order {is} hamburger price {is} 5
                    {if} order {is} fries price {is} 2
                    drinks {is} {ask} 'What would you like to drink?'
                    {print} 'You would like ' drinks
                    {print} 'That will be ' price ' dollars for your ' order ' please'
                    {print} 'The drinks are free in this level because Hedy cant calculate the price yet...'
                    ```
                start_code: "{print} 'On to the next level!'"
            6:
                story_text: |
                    ## What's next?
                     Great job! You've reached the end of this level, which means you have practiced with `{if}` and `{else}`. You have probably noticed that your codes are getting longer and longer.
                     For example {if} you want to program 'Happy Birthday'.

                    That's a lot of code for mainly the same words over and over again. Luckily in the next level has a solution with the `{repeat}` command, that allows you to repeat a line of code multiple times.
                example_code: |
>>>>>>> Stashed changes
                    ```
                feedback: "No it should be for each name in the list nameS, so the other way around"
            -   option: |
                    ```
<<<<<<< Updated upstream
                    {for} food {in} food
=======
                start_code: "{print} 'On to the next level!'"
            7:
                story_text: |
                    ## What's next?
                    Now you've learned how to repeat one single line of code. This comes in handy, but it's not always enough. Sometimes you want to repeat multiple lines at once.
                    The next level allows you to group a couple of lines of code, and repeat that little group of lines all at once!
                example_code: |
>>>>>>> Stashed changes
                    ```
                feedback: "Each name should be told what they will have for dinner."
            -   option: |
                    ```
<<<<<<< Updated upstream
                    {for} name {in} food
=======

                start_code: "{print} 'Lets go to the next level!'"
            8:
                story_text: |
                    ## What's next?
                    Great job! You've reached the end of another level! In this level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...
                    Good news! In the next level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command.
                example_code: |
                    ```
                    answer = {ask} 'Would you like to go to the next level?'
                    {if} answer {is} yes
                        {print} 'Great! You can use the {repeat} commando in the {if} command!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                    {else}
                        {print} 'Okay, you can stay here for a little longer!'
                    ```
                start_code: "{print} 'Lets go to the next level!'"
            9:
                story_text: |
                    ## What's next?
                    You're doing great! In this level we still face a small problem. You have learned to repeat lines, but what if you'd want to slightly change the line.
                    For example if you want to sing the song 'if you're happy and you know it'. It would look like this:

                    If you'd also want the next verse 'stomp your feet', and the next one, and the next one, you'd have to change the code completely.
                    In the next level you'll learn the `{for}` command, which allows you to make a list of actions and repeat the code with another action each time!
                    Please take a look!
                example_code: |
>>>>>>> Stashed changes
                    ```
                feedback: "Each name should be told what they will have for dinner."
            correct_answer: "A"
            hint: "Each name should be told what they will have for dinner."
            question_score: '10'
        8:
            question_text: "What should be on the _?_ in this code that decides which color shirt you get?"
            code: |-
                names = Donna, Tommy, Ben
                colors = blue, red, purple
                {for} name {in} names
                    {print} _?_
            mp_choice_options:
            -   option: |
                    ```
<<<<<<< Updated upstream
                    'name gets a color shirt'
                    ```
                feedback: "That's not it!"
            -   option: |
                    ```
                    name 'gets a ' colors {at} {random} ' shirt'
                    ```
                feedback: "Great job! This was a hard one!"
            -   option: |
                    ```
                    names 'gets a ' color {at} {random} ' shirt'
                    ```
                feedback: "You want each name printed. So the first word should not be names but..."
            -   option: |
                    ```
                    'people gets a colors shirt'
                    ```
                feedback: "There is no variable named people.."
            correct_answer: "B"
            hint: "Mind the quotation marks and the names of the variables"
            question_score: '10'
        9:
            question_text: "What is the first question Hedy will ask you when you run the program?"
            code: |-
                courses = appetizer, main course, dessert
                names = Timon, Onno
                {for} name in names
                    {for} course {in} courses
                        food = {ask} name ', what would you like to eat as your ' course '?'
                        {print} name ' orders ' food ' as their ' course
            mp_choice_options:
            -   option: "Timon, what would you like to eat as your appetizer?"
                feedback: "Perfect!"
            -   option: "Onno, what would you like to eat as your appetizer?"
                feedback: "Timon is first on the list!"
            -   option: "Timon, what would you like to eat as your dessert?"
                feedback: "Appetizers are first in the list"
            -   option: "You don't know that. Hedy will choose `{at} {random}`."
                feedback: "There is no `{at} {random}` in this code..."
            correct_answer: "A"
            hint: "The first options from both lists are chosen."
            question_score: '10'
        10:
            question_text: "What is true about this code?"
            code: |-
                prices = 1 million dollars, car, sandwich
                names = Bob, Patrick, Sandy, Larry
                {for} price {in} prices
                    {print} 'The ' price 'is won by ' names {at} {random}
            mp_choice_options:
            -   option: "Everybody will always win a price."
                feedback: "That is not true, you could end up without a price."
            -   option: "All the prices always go to one single person."
                feedback: "That is not true. All the prices are given away, but to random people"
            -   option: "Larry will never win a price"
                feedback: "That is not true. Larry has the same odds as the others"
            -   option: "Someone might win with two prices"
                feedback: "You get it!"
            correct_answer: "D"
            hint: "Try to imagine the output of this code."
            question_score: '10'
    12:
        1:
            question_text: "Which output is correct?"
            code: |-
              print 'three and a half plus one and a half is...'
              print 3.5 + 1.5
            mp_choice_options:
            -   option: |
                  5
                feedback: "Don't forget the first line of code!"
            -   option: |
                  3.5 + 1.5
                feedback: "This is not the one!"
            -   option: |
                  thee and a half plus one and a half is...
                  five
                feedback: "Take a close look at the second line..."
            -   option: |
                  three and a half plus one and a half is...
                  5
                feedback: "Great job!"
            correct_answer: "D"
            hint: "Both lines are printed!"
            question_score: '10'
        2:
            question_text: "Which of these codes is correct?"
            mp_choice_options:
            -   option: |-
                  ```
                  flavors is vanilla, strawberry, chocolate
                  print 'I would like a ' flavors at random ' cake.'
                  ```
                feedback: "All the different values of flavors should be in quotation marks."
            -   option: |-
                  ```
                  'flavors = vanilla, strawberry, chocolate'
                  print 'I would like a ' flavors at random ' cake.'
                  ```
                feedback: "All the different values of flavors should be in quotation marks."
            -   option: |-
                  ```
                  flavors = 'vanilla', 'strawberry', 'chocolate'
                  print 'I would like a ' flavors at random ' cake.'
                  ```
                feedback: "Alright!"
            -   option: |

                  ```
                  flavors = 'vanilla, strawberry, chocolate'
                  print 'I would like a ' flavors at random ' cake.'
                  ```
                feedback: "All the different values of flavors should be in quotation marks."
            correct_answer: "C"
            hint: "The second line is the same in each code, pay attention to the first line"
            question_score: '10'
        3:
            question_text: "What's wrong with this code?"
            code: |-
              favorite_animal = ask 'What is your favorite animal?'
              print 'I like ' favoriteanimal ' too!'
            mp_choice_options:
            -   option: |
                  The name of the variable is different in line 1 than in line 2.
                feedback: "Correct!"
            -   option: |
                  The quotation marks aren't used correctly in line 2
                feedback: "That's not true"
            -   option: |
                  You can't use the = sign when using an ask command
                feedback: "That's not true"
            -   option: |
                  Nothing is wrong.
                feedback: "That's not true"
            correct_answer: "A"
            hint: "The quotation marks are used correctly"
            question_score: '10'
        4:
            question_text: "In which lines are quotation marks needed to get the code to work?"
            code: |-
              print Welcome to the online shoe shop
              category = ask What kind of shoes are you looking for?
              if category = high heels
                print High heels are 50% off now!
            mp_choice_options:
            -   option: |
                  Line 1 and 2
                feedback: "No"
            -   option: |
                  Line 1, 2 and 3
                feedback: "No"
            -   option: |
                  Line 1, 2 and 4
                feedback: "No"
            -   option: |
                  All of the lines
                feedback: "Perfect!"
            correct_answer: "D"
            hint: "Does line 3 need quotation marks too?"
            question_score: '10'
        5:
            question_text: "What output does Agent007 get when they put in the correct password?"
            code: |-
              name is ask 'What is your name?'
              if name is 'Agent007'
                  a is 'Go to the airport '
              else
                  a is 'Go to the train station '
              password is ask 'What is the password?'
              if password is 'TOPSECRET'
                  b is 'tomorrow at 02.00'
              else
                  b is 'today at 10.00'
              print a + b
            mp_choice_options:
            -   option: "Go to the train station today at 10.00"
                feedback: "The agent won't be catching any bad guys here"
            -   option: "Go to the airport tomorrow at 02.00"
                feedback: "You've cracked the code!"
            -   option: "Go to the train station tomorrow at 02.00"
                feedback: "The agent won't be catching any bad guys here"
            -   option: "Go to the airport tomorrow at 10.00"
                feedback: "The agent won't be catching any bad guys here"
            correct_answer: "B"
            hint: "The correct password is TOPSECRET"
            question_score: '10'
        6:
            question_text: "Which line should be filled in at the ???"
            code: |
              print 'Welcome to McHedy!'
              order = ask 'Would you like a hamburger or fries?'
              if order = 'hamburger'
                price = 12
              if order = 'fries'
                price = 4
              drinks = ask 'Would you like a drink with that for 2 dollars?'
              if drinks = 'yes'
                ???
              print 'That will be ' price ' dollar please'
            mp_choice_options:
            -   option: |
                  ```
                  price = 14
                  ```
                feedback: "What if you only order fries and a drink?"
            -   option: |-
                  ```
                  price = '14'
                  ```
                feedback: "What if you only order fries and a drink?"
            -   option: |-
                  ```
                  price = price + 2
                  ```
                feedback: "Excellent!"
            -   option: |-
                  ```
                  price = + 2
                  ```
                feedback: "Almost there!"
            correct_answer: "C"
            hint: "What if you only order fries and a drink?"
            question_score: '10'
        7:
            question_text: "Which output does a vegan get?"
            code: |-
              menu = 'cookies', 'cheese', 'grapes'
              print "It's my birthday! I`ve brought some snacks!"
              diet = ask 'Do you have any dietary restrictions?'
              if diet = 'gluten free'
                  remove 'cookies' from menu
              if diet = 'vegan'
                  remove 'cheese' from menu
              print 'For you I have brought: '
              for snack in menu
                  print snack
            mp_choice_options:
            -   option: |-
                  It's my birthday! I've brought some snacks!
                  For you I have brought:
                  cookies
                  grapes
                feedback: "Terrific!"
            -   option: |-
                  It's my birthday! I've brought some snacks!
                  For you I have brought:
                  grapes
                feedback: "There's more options than just one"
            -   option: |-
                  It's my birthday! I've brought some snacks!
                  For you I have brought:
                  cheese
                  grapes
                feedback: "A vegan person can't have cheese"
            -   option: |-
                  It's my birthday! I've brought some snacks!
                  For you I have brought:
                  grapes
                  cookies
                feedback: "Almost there, but look at the order of snacks in the list"
            correct_answer: "A"
            hint: "What item is removed from the list when you answer 'vegan'?"
            question_score: '10'
        8:
            question_text: "Which code was used to create this output?"
            code: |-
              3.5
            mp_choice_options:
            -   option: |-
                  ```
                  print '7 / 2'
                  ```
                feedback: "No"
            -   option: |-
                  ```
                  print 7 / 2
                  ```
                feedback: "That is right!"
            -   option: |-
                  ```
                  print 7 : 2
                  ```
                feedback: "No"
            -   option: |-
                  ```
                  print 7 * 2
                  ```
                feedback: "No"
            correct_answer: "B"
            hint: "7 devided by 2 is 3.5"
            question_score: '10'
        9:
            question_text: "Which code should be filled in in line 1 at the ???"
            code: |-
              ???
              print 'You won ' prices at random '!'
            mp_choice_options:
            -   option: |-
                  ```
                  prices = 'one' 'million' 'dollars', 'nothing'
                  ```
                feedback: "You won nothing"
            -   option: |-
                  ```
                  prices = 'one million dollars, nothing'
                  ```
                feedback: "You won nothing"
            -   option: |-
                  ```
                  prices = 'one million dollars', 'nothing'
                  ```
                feedback: "Winner!"
            -   option: |-
                  ```
                  'prices' = 'one million dollars', 'nothing'
                  ```
                feedback: "You one nothing"
            correct_answer: "C"
            hint: "The items on the list should be in quotation marks"
            question_score: '10'
        10:
            question_text: "Which line of code should be filled in at the ??? to complete the song ?"
            code: |-
              actions = 'clap your hands', 'stomp your feet', 'shout Hurray!'
              ???
                  for i in range 0 to 1
                      print 'if youre happy and you know it'
                      print action
                  print 'if youre happy and you know it and you really want to show it'
                  print 'if youre happy and you know it'
                  print action
            mp_choice_options:
            -   option: "for i in range 1 to 3"
                feedback: "This is a hard one! All the actions on the list must be in the song."
            -   option: "for action in actions"
                feedback: "You are amazing!"
            -   option: "repeat 3 times"
                feedback: "This is a hard one! All the actions on the list must be in the song."
            -   option: "print actions at random"
                feedback: "This is a hard one! All the actions on the list must be in the song."
            correct_answer: "B"
            hint: "This is a hard one! All the actions on the list must be in the song."
            question_score: '10'
    13:
        1:
            question_text: "Which code should be filled in at the ??? ?"
            code: |-
              name = ask 'What is your name?'
              song = ask 'Whould you like to hear a song?'
              birthday = ask 'Is today your birthday?'
              ???
                print 'Happy Birthday to you!'
                print 'Happy Birthday to you!'
                print 'Happy Birthday. dear ' name
                print 'Happy Birthday to you!'
            mp_choice_options:
            -   option: |-
                  ```
                  if birthday and song = 'yes'
                  ```
                feedback: "Almost there"
            -   option: |-
                  ```
                  if birthday = 'yes' and name = 'Hedy'
                  ```
                feedback: "Hedy only sings for you if you like to hear a song"
            -   option: |-
                  ```
                  if song = 'yes' and birthday = 'yes'
                  ```
                feedback: "Super!"
            -   option: |-
                  ```
                  if song = 'yes' or birthday = 'yes'
                  ```
                feedback: "Hedy only sings if both answers are yes"
            correct_answer: "C"
            hint: "Hedy sings if you want to hear a song and it's you birthday"
            question_score: '10'
        2:
            question_text: "Which command is missing in the code at the place of the ??? ?"
            code: |-
              menu = 'cheese', 'sausage rolls', 'cookies'
              diet = ask 'Do you have any dietary restrictions?'
              if diet = 'vegan' ??? diet = 'halal'
                  remove 'sausage rolls' from menu
            mp_choice_options:
            -   option: "and"
                feedback: "You don't have to be vegan and muslim"
            -   option: "or"
                feedback: "Great thinking!"
            -   option: " + "
                feedback: "No"
            -   option: "print"
                feedback: "No"
            correct_answer: "B"
            hint: "Neither vegans nor muslims can eat sausage rolls."
            question_score: '10'
        3:
            question_text: "Which output is given to a member without a discount code?"
            code: |-
              member = ask 'Do you have a membership card?'
              discount = ask 'Do you have a discount code?'
              if member = 'yes' or discount = 'yes'
                  print 'You get a free apple pie!'
              else
                  print 'That will be 5 dollars please'
            mp_choice_options:
            -   option: "You get a free pie!"
                feedback: "Great job!"
            -   option: "That will be 5 dollars please"
                feedback: "That is not true"
            -   option: "This code won't work, so there is no output"
                feedback: "There is nothing wrong with the code"
            -   option: "There is no way of knowing"
                feedback: "There is! Read the question carefully"
            correct_answer: "A"
            hint: "Mind the command 'or' in line 3"
            question_score: '10'
        4:
            question_text: "Which line of code should follow this line in rock-paper-scissors game?"
            code: |-
              if computer_choice is 'rock' and your_choice is 'paper'
            mp_choice_options:
            -   option: "print 'you win'"
                feedback: "You win!"
            -   option: "print 'you lose'"
                feedback: "You lose!"
            -   option: "print 'tie'"
                feedback: "It's only a tie if both choices are the same"
            -   option: "print 'try again'"
                feedback: "Try again!"
            correct_answer: "A"
            hint: "Paper beats rock"
            question_score: '10'
        5:
            question_text: "Which statement is true about this code?"
            code: |-
              if name = 'Cinderella' and shoe_size = '38'
                  print 'You are my one true love!'
            mp_choice_options:
            -   option: "Every person with shoe size 38 is this prince's one true love"
                feedback: "The prince is a little more picky than that!"
            -   option: "Every person named Cinderella is this prince's one true love"
                feedback: "The prince is a little more picky than that!"
            -   option: "Every person that is named Cinderella and has shoe size 38 is this prince's one true love"
                feedback: "Fantastic!"
            -   option: "Every person that's not named Cinderella and does not have shoe size 38 is this prince's one true love"
                feedback: "The prince is a little more picky than that!"
            correct_answer: "C"
            hint: "Both statements have to be true"
            question_score: '10'
        6:
            question_text: "Which statement about this code is true?"
            code: |-
              print 'Let me guess which family member you are!'
              glasses = ask 'Do you wear glasses?'
              female = ask 'Are you female?'
              if glasses = 'yes' and female = 'yes'
                  print 'You must be Sophie!'
              if glasses = 'no' and female = 'yes'
                 print 'You must be Marleen!'
              if glasses = 'yes' and female = 'no'
                  print 'You must be Wouter!'
              if glasses = 'no' and female = 'no'
                  print 'You must be Michael!'
            mp_choice_options:
            -   option: "Michael is a boy with glasses"
                feedback: "Try again"
            -   option: "Marleen is a girl with glasses"
                feedback: "Try again"
            -   option: "Wouter is a boy without glasses"
                feedback: "Try again"
            -   option: "Sophie is a girl with glasses"
                feedback: "Great job!"
            correct_answer: "D"
            hint: "Take a good look! Or do you need glasses?"
            question_score: '10'
        7:
            question_text: "Which statement is false?"
            code: |-
              print 'Thank you for helping me take care of my pets'
              print 'Here is a program to help feed them'
              animal is ask 'What kind of animal are they?'
              color is ask 'What colour are they?'
              if animal is 'cat' and color = 'grey'
                  print 'That is Abby. She eats 3 scoops of cat nibbles'
              if animal is 'cat' and color = 'orange'
                  print 'That is Milo. He eats 4 scoops of cat nibbles'
              if animal is 'bird' or color is 'black'
                  print 'I fed them this moring! They do not need more food today'
              if animal is 'hamster' and color is 'brown'
                  print 'You can feed them a piece of carrot'
            mp_choice_options:
            -   option: "The grey cat is called Abby"
                feedback: "This is true!"
            -   option: "Milo the orange cat eats 4 scoops of cat nibbles"
                feedback: "This is true"
            -   option: "The black hamster needs to be fed a piece of carrot"
                feedback: "Great job!"
            -   option: "The yellow bird was fed this morning"
                feedback: "This is true"
            correct_answer: "C"
            hint: "Read the last 4 lines carefully"
            question_score: '10'
        8:
            question_text: "What output do you get if you order popcorn but no drink?"
            code: |-
              print 'Welcome to the movie theater'
              popcorn = ask 'Would you like some popcorn?'
              drink = ask 'Would you like a drink?'
              if popcorn = 'yes' and drink = 'yes'
                  print 'That will be 8 dollars please'
              if popcorn = 'no' and drink = 'yes'
                 print 'That will be 3 dollars please'
              if popcorn = 'yes' and drink = 'no'
                  print 'That will be 5 dollars please'
              if popcorn = 'no' and drink = 'no'
                  print 'Ok'
              print 'Enjoy the movie'
            mp_choice_options:
            -   option: |-
                  Welcome to the movie theater
                  That will be 8 dollars please
                  Enjoy the movie
                feedback: "You have paid too much!"
            -   option: |-
                  Welcome to the movie theater
                  That will be 5 dollars please
                  Enjoy the movie
                feedback: "Amazing!"
            -   option: |-
                  Welcome to the movie theater
                  That will be 3 dollars please
                  Enjoy the movie
                feedback: "That's not enough money!"
            -   option: |-
                  Welcome to the movie theater
                  Ok
                  Enjoy the movie
                feedback: "You have to pay for your popcorn!"
            correct_answer: "B"
            hint: "popcorn = yes and drink = no"
            question_score: '10'
        9:
            question_text: "What is wrong with this code?"
            code: |-
              1  chocolate = ask 'Would you like chocolate sauce on your ice cream?'
              2  sprinkles = ask 'Would you like sprinkles on your ice cream?'
              3  if chocolate and sprinkles = 'yes'
              4      print 'Ice cream with chocolate sauce and sprinkles, coming up!'
              5  if chocolate = 'yes' and sprinkles = 'no'
              6      print 'Ice cream with chocolate sauce, coming up!'
              7  if chocolate = 'no' and sprinkles = 'yes'
              8      print 'Ice cream with sprinkles, coming up'
              9  if chocolate = 'no' and sprinkles = 'no'
              10     print 'Just plain icecream, coming up!'
            mp_choice_options:
            -   option: "Line 3 should be: if chocolate = 'yes' and sprinkles is 'no'"
                feedback: "Correct!"
            -   option: "Line 3 should be: if chocolate = 'no' and sprinkles is 'no'"
                feedback: "This is not what I ordered!"
            -   option: "Line 5 should be: if chocolate = 'yes' and sprinkles is 'yes'"
                feedback: "This is not what I ordered!"
            -   option: "Line 7 should be: if chocolate = 'yes' and sprinkles is 'no'"
                feedback: "This is not what I ordered!"
            correct_answer: "A"
            hint: "There is a mistake in line 3"
            question_score: '10'
        10:
            question_text: "Which command needs to be in line 8 at the place of the ??? ?"
            code: |-
              print 'Welcome to the product finder of this supermarkt'
              item is ask 'What product are you looking for?'
              bakery = 'bread', 'buns', 'muffins'
              drinks = 'soda', 'water', 'lemonade'
              snacks = 'chips', 'nuts', 'dips'
              frozen = 'fries', 'icecream', 'pizza'
              fruit = 'bananas', 'apples', 'oranges'
              if item in snacks ??? item in drinks
                  print 'This item is in aile 3'
              if item in bakery or item in bakery
                  print 'This item in in the back of the store'
              if item in fruit
                  print 'The fruit is sold near the register'
            mp_choice_options:
            -   option: "and"
                feedback: "There are no items that are both the list of snacks and the list of drinks"
            -   option: "or"
                feedback: "Great job!"
            -   option: "in"
                feedback: "No"
            -   option: "if"
                feedback: "No"
            correct_answer: "B"
            hint: "The item is either in the list of snacks, or in the list of drinks"
            question_score: '10'


# Empty format for a question to use later
#        10:
#            question_text:
#           code: |-
#            mp_choice_options:
#                - option:
#                  feedback:
#                - option:
#                  feedback:
#                - option:
#                  feedback:
#                - option:
#                  feedback:
#            correct_answer:
#            hint:
#            question_score: '10'
=======
                start_code: "{print} 'Lets go to the next level!'"
            10:
                story_text: |
                    ## What's next?
                    You have reached the end of this level, you're doing great! You are about to go to the next level. In the higher levels, Hedy is focussing more and more on teaching you the programming language Python.
                    In Python there is no `{repeat}` command, but there is a command that works like {repeat}. Are you curious to find out how to say `{repeat}` in Python language? Quickly go on to find out!
                start_code: "{print} 'Lets go to the next level!'"
            11:
                story_text: |
                    ## What's next?
                    Maybe you have tried using decimal numbers in your restaurant adventure. If you did, you probably noticed that Hedy didn't understand them yet and always rounded off.
                    From the next level on you can use decimal numbers.

                example_code: |
                    ```
                    burger {is} 5
                    drink {is} 2
                    total {is} burger + drink
                    print 'You have ordered a burger and a drink'
                    print 'That costs ' total ' dollars please'
                    ```
                    The code above works, because the burger is 5 dollars and the drink is 2 dollar. But if you charge 50 cents more, the program doesn't work anymore! Like the code below:
                    ```
                    burger {is} 5.50
                    drink {is} 2.30
                    total {is} burger + drink
                    print 'You have ordered a burger and a drink'
                    print 'That costs ' total ' dollars please'
                    ```
                    Go to the next level to make this code work!
                start_code: "{print} 'Lets go to the next level!'"
            12:
                story_text: |
                    ## What's next?
                    In the previous levels you learned how to put two `{if}`commands inside each other. This works fine, but it does give you very long and unhandy codes like this one:

                    In this system you have to give both the correct username and the correct password.
                    In the next level you will learn the `{and}` command that will make this code a ot shorter and more understandable!
                    Check it out!
                example_code: |
                    ```
                    username {is} {ask} 'What is your username?'
                    password {is} {ask} 'What is your password?'
                    {if} username {is} 'Hedy'
                        {if} password {is} 'secret'
                            {print} 'Welcome Hedy!'
                        {else}
                            {print} 'Access denied'
                    {else}
                        {print} 'Access denied!'
                    ```
                start_code: "{print} 'Lets go to the next level!'"
            13:
                story_text: |
                    ## What's next?
                    With the program below you can calculate if you've passed a subject at school (so, a grade of six or higher).
                    You can see this code is extremely inefficient, due to the very long code in line 5.
                    All the different grades from 1 to 5 had to be programmed separately. Lucky for you, in the next level you'll learn how to do this without this extremely long code!
                example_code: |
                    ```
                    first_grade = {ask} 'What score did you get on your first test?'
                    second_grade = {ask} 'What score did you get on your second test?'
                    added {is} first_grade + second_grade
                    mean_grade {is} added / 2
                    {if} mean_grade = 1 {or} mean_grade = 2 {or} mean_grade = 3 {or} mean_grade = 4 {or} mean_grade = 5
                        {print} 'Oh no! You have failed the subject...'
                    {else}
                        {print} 'Great! You have passed the subject!'
                    ```
                start_code: "{print} 'Lets go to the next level!'"
            14:
                story_text: |
                    ## What's next?
                    In this game below a code has been made to make sure the player can play on as long as he/she wants...
                    But the code is ineffective and way too long. Also, what if the player wants to play 101 games instead of 100?
                    You can't play to infinity?
                    In the next level you will learn a command that makes all of this a lot easier!
                example_code: |
                    ```
                    game {is} 'on'
                    {for} i {in} {range} 1 {to} 100
                        {if} game {is} 'on'
                            answer = {ask} 'Do you want to continue?'
                            {if} answer {is} 'no'
                                game {is} 'over'
                            {if} answer {is} 'yes'
                                {print} 'Ok we will continue'
                    ```
                start_code: "{print} 'Lets go to the next level!'"
            15:
                story_text: |
                    ## What's next?
                    In the next level we will grow a bit more towards real Python code. You will also learn how to match two lists together.
                    This way you can program a code in which the correct animal is matched to the right sound.
                    Because the two codes below... Are obviously nonsense!
                example_code: |
                    ```
                    animals = 'chicken', 'horse', 'cow'
                    sounds = 'cluck', 'neigh', 'moo'
                    {for} animal {in} animals
                        {print} 'A ' animal ' says ' sounds {at} {random}
                    ```
                    You could also try to make it work this way, but....
                    ```
                    animals = 'chicken', 'horse', 'cow'
                    sounds = 'cluck', 'neigh', 'moo'
                    {for} animal {in} animals
                        {for} sound {in} sounds
                            {print} 'A ' animal ' says ' sound
                    ```
                start_code: "{print} 'Lets go to the next level!'"
            16:
                story_text: |
                    ## What's next?
                    In the next level it's time for a new command. You might have noticed in the previous levels that `{if}` and `{else}` sometimes aren't enough.
                    For example in this code:
                example_code: |
                    ```
                    {print} 'What is for dinner tonight?'
                    options = ['pizza', 'broccoli', 'green beans']
                    chosen = options {at} {random}
                    {if} chosen = 'pizza'
                        {print} 'Yummy! Pizza!'
                    {else}
                        {print} 'Yikes...'
                    ```
                story_text_2: In this code it would be great to have 2x an `{else}` so you could have one option for the broccoli and one for the green beans. The next level comes with the new command `{elif}` that makes this possible! So check out the next level now!
                start_code: "{print} 'Lets go to the next level!'"
            17:
                story_text: |
                    ## What's next?
                    In the next level you will learn a real Python way to use `{print}`.
                start_code: "{print} 'Lets go to the next level!'"
            18:
                story_text: |
                    ## What's next?
                    Congratulations! You have reached the last level of Hedy! The code you have created here can be copied to real Python environments like replit or PyCharm, and you can continue learning there!
                    Note however that Python can only read English commands, so if you have been using other languages, you will need to switch to English now.
                start_code: "{print} ('Great job!!!')"
>>>>>>> Stashed changes
